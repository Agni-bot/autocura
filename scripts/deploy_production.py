#!/usr/bin/env python3
"""
Script de Deploy em Produ√ß√£o - Sistema AutoCura
==============================================

Script automatizado para deploy seguro em ambiente de produ√ß√£o.
"""

import os
import sys
import subprocess
import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List

class ProductionDeployer:
    """Deployer para ambiente de produ√ß√£o"""
    
    def __init__(self, environment: str = "production"):
        self.environment = environment
        self.project_root = Path(__file__).parent.parent
        self.deployment_log = []
        
    def log(self, message: str, level: str = "INFO"):
        """Log de deployment"""
        timestamp = datetime.now().isoformat()
        log_entry = f"[{timestamp}] [{level}] {message}"
        print(log_entry)
        self.deployment_log.append(log_entry)
    
    async def deploy(self):
        """Executa deploy completo"""
        
        self.log("üöÄ Iniciando deploy em produ√ß√£o do Sistema AutoCura")
        
        try:
            # 1. Verifica√ß√µes pr√©-deploy
            await self.pre_deployment_checks()
            
            # 2. Preparar ambiente
            await self.prepare_environment()
            
            # 3. Configurar seguran√ßa
            await self.configure_security()
            
            # 4. Deploy da aplica√ß√£o
            await self.deploy_application()
            
            # 5. Configurar monitoramento
            await self.setup_monitoring()
            
            # 6. Testes p√≥s-deploy
            await self.post_deployment_tests()
            
            # 7. Finalizar
            await self.finalize_deployment()
            
            self.log("‚úÖ Deploy conclu√≠do com sucesso!", "SUCCESS")
            
        except Exception as e:
            self.log(f"‚ùå Erro no deploy: {e}", "ERROR")
            await self.rollback()
            raise
    
    async def pre_deployment_checks(self):
        """Verifica√ß√µes antes do deploy"""
        
        self.log("üîç Executando verifica√ß√µes pr√©-deploy...")
        
        # Verificar Docker
        try:
            result = subprocess.run(["docker", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception("Docker n√£o est√° dispon√≠vel")
            self.log(f"‚úÖ Docker: {result.stdout.strip()}")
        except Exception as e:
            raise Exception(f"Docker n√£o encontrado: {e}")
        
        # Verificar Docker Compose
        try:
            result = subprocess.run(["docker-compose", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception("Docker Compose n√£o est√° dispon√≠vel")
            self.log(f"‚úÖ Docker Compose: {result.stdout.strip()}")
        except Exception as e:
            raise Exception(f"Docker Compose n√£o encontrado: {e}")
        
        # Verificar vari√°veis de ambiente
        required_vars = ["AI_API_KEY", "POSTGRES_PASSWORD", "GRAFANA_PASSWORD"]
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            raise Exception(f"Vari√°veis de ambiente faltando: {missing_vars}")
        
        self.log("‚úÖ Todas as verifica√ß√µes pr√©-deploy passaram")
    
    async def prepare_environment(self):
        """Prepara ambiente de produ√ß√£o"""
        
        self.log("üèóÔ∏è Preparando ambiente de produ√ß√£o...")
        
        # Criar diret√≥rios necess√°rios
        directories = [
            "logs",
            "data",
            "config",
            "sql",
            "scripts"
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            self.log(f"üìÅ Diret√≥rio criado: {directory}")
        
        # Copiar arquivos de configura√ß√£o
        await self.create_production_configs()
        
        self.log("‚úÖ Ambiente preparado")
    
    async def create_production_configs(self):
        """Cria configura√ß√µes de produ√ß√£o"""
        
        # Docker Compose de produ√ß√£o
        docker_compose_content = """version: '3.8'

services:
  autocura-api:
    build: 
      context: .
      dockerfile: docker/Dockerfile.production
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - AI_API_KEY=${AI_API_KEY}
      - REDIS_URL=redis://autocura-redis:6379
      - POSTGRES_URL=postgresql://autocura:${POSTGRES_PASSWORD}@autocura-postgres:5432/autocura
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - autocura-redis
      - autocura-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  autocura-redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  autocura-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=autocura
      - POSTGRES_USER=autocura
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  autocura-monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  autocura-grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
"""
        
        with open("docker-compose.production.yml", "w") as f:
            f.write(docker_compose_content)
        
        # Configura√ß√£o do Prometheus
        prometheus_config = """global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'autocura-api'
    static_configs:
      - targets: ['autocura-api:8001']
    metrics_path: '/metrics'
    scrape_interval: 10s

  - job_name: 'autocura-evolution'
    static_configs:
      - targets: ['autocura-api:8001']
    metrics_path: '/evolution/metrics'
    scrape_interval: 30s
"""
        
        with open("config/prometheus.yml", "w") as f:
            f.write(prometheus_config)
        
        # SQL de inicializa√ß√£o
        init_sql = """-- Inicializa√ß√£o do banco AutoCura
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Tabela de evolu√ß√µes
CREATE TABLE IF NOT EXISTS evolutions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    request_id VARCHAR(255) UNIQUE NOT NULL,
    evolution_type VARCHAR(100) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP,
    success BOOLEAN DEFAULT FALSE,
    execution_time FLOAT,
    approval_level VARCHAR(50),
    requester VARCHAR(255),
    context TEXT,
    generated_code TEXT,
    analysis_result JSONB,
    metrics JSONB
);

-- Tabela de m√©tricas
CREATE TABLE IF NOT EXISTS metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metric_type VARCHAR(100) NOT NULL,
    metric_name VARCHAR(255) NOT NULL,
    metric_value FLOAT NOT NULL,
    tags JSONB,
    evolution_id UUID REFERENCES evolutions(id)
);

-- √çndices para performance
CREATE INDEX IF NOT EXISTS idx_evolutions_status ON evolutions(status);
CREATE INDEX IF NOT EXISTS idx_evolutions_created_at ON evolutions(created_at);
CREATE INDEX IF NOT EXISTS idx_metrics_timestamp ON metrics(timestamp);
CREATE INDEX IF NOT EXISTS idx_metrics_type ON metrics(metric_type);

-- Usu√°rio para aplica√ß√£o
CREATE USER autocura_app WITH PASSWORD '${POSTGRES_PASSWORD}';
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO autocura_app;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO autocura_app;
"""
        
        with open("sql/init.sql", "w") as f:
            f.write(init_sql)
        
        self.log("‚úÖ Configura√ß√µes de produ√ß√£o criadas")
    
    async def configure_security(self):
        """Configura seguran√ßa"""
        
        self.log("üõ°Ô∏è Configurando seguran√ßa...")
        
        # Verificar se as chaves est√£o seguras
        ai_key = os.getenv("AI_API_KEY")
        if ai_key and len(ai_key) < 20:
            self.log("‚ö†Ô∏è Chave AI_API_KEY parece muito curta", "WARNING")
        
        # Configurar firewall (exemplo)
        security_rules = [
            "# Regras de firewall para AutoCura",
            "# Permitir apenas portas necess√°rias:",
            "# 8001 - API AutoCura",
            "# 3000 - Grafana",
            "# 9090 - Prometheus",
            "# 22 - SSH (admin apenas)"
        ]
        
        with open("config/security_rules.txt", "w") as f:
            f.write("\n".join(security_rules))
        
        self.log("‚úÖ Seguran√ßa configurada")
    
    async def deploy_application(self):
        """Deploy da aplica√ß√£o"""
        
        self.log("üöÄ Fazendo deploy da aplica√ß√£o...")
        
        # Build e start dos containers
        try:
            # Pull das imagens base
            self.log("üì• Baixando imagens base...")
            subprocess.run(["docker-compose", "-f", "docker-compose.production.yml", 
                          "pull"], check=True)
            
            # Build da aplica√ß√£o
            self.log("üî® Construindo aplica√ß√£o...")
            subprocess.run(["docker-compose", "-f", "docker-compose.production.yml", 
                          "build"], check=True)
            
            # Start dos servi√ßos
            self.log("‚ñ∂Ô∏è Iniciando servi√ßos...")
            subprocess.run(["docker-compose", "-f", "docker-compose.production.yml", 
                          "up", "-d"], check=True)
            
            # Aguardar inicializa√ß√£o
            self.log("‚è≥ Aguardando inicializa√ß√£o dos servi√ßos...")
            await asyncio.sleep(30)
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erro no deploy: {e}")
        
        self.log("‚úÖ Aplica√ß√£o deployada")
    
    async def setup_monitoring(self):
        """Configura monitoramento"""
        
        self.log("üìä Configurando monitoramento...")
        
        # Verificar se Prometheus est√° rodando
        try:
            import requests
            response = requests.get("http://localhost:9090/-/healthy", timeout=10)
            if response.status_code == 200:
                self.log("‚úÖ Prometheus est√° funcionando")
            else:
                self.log("‚ö†Ô∏è Prometheus n√£o est√° respondendo", "WARNING")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Erro ao verificar Prometheus: {e}", "WARNING")
        
        # Verificar se Grafana est√° rodando
        try:
            import requests
            response = requests.get("http://localhost:3000/api/health", timeout=10)
            if response.status_code == 200:
                self.log("‚úÖ Grafana est√° funcionando")
            else:
                self.log("‚ö†Ô∏è Grafana n√£o est√° respondendo", "WARNING")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Erro ao verificar Grafana: {e}", "WARNING")
        
        self.log("‚úÖ Monitoramento configurado")
    
    async def post_deployment_tests(self):
        """Testes p√≥s-deploy"""
        
        self.log("üß™ Executando testes p√≥s-deploy...")
        
        # Teste de sa√∫de da API
        try:
            import requests
            response = requests.get("http://localhost:8001/health", timeout=10)
            if response.status_code == 200:
                self.log("‚úÖ API est√° respondendo")
            else:
                raise Exception(f"API retornou status {response.status_code}")
        except Exception as e:
            raise Exception(f"Erro no teste da API: {e}")
        
        # Teste b√°sico de auto-modifica√ß√£o
        try:
            result = subprocess.run([
                sys.executable, "test_auto_modification_simple.py"
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                self.log("‚úÖ Teste b√°sico de auto-modifica√ß√£o passou")
            else:
                self.log(f"‚ö†Ô∏è Teste b√°sico falhou: {result.stderr}", "WARNING")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Erro no teste b√°sico: {e}", "WARNING")
        
        self.log("‚úÖ Testes p√≥s-deploy conclu√≠dos")
    
    async def finalize_deployment(self):
        """Finaliza deployment"""
        
        self.log("üèÅ Finalizando deployment...")
        
        # Salvar log de deployment
        log_file = f"logs/deployment_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        with open(log_file, "w") as f:
            f.write("\n".join(self.deployment_log))
        
        # Criar arquivo de status
        status = {
            "deployment_time": datetime.now().isoformat(),
            "environment": self.environment,
            "status": "success",
            "services": [
                "autocura-api",
                "autocura-redis", 
                "autocura-postgres",
                "autocura-monitoring",
                "autocura-grafana"
            ],
            "endpoints": {
                "api": "http://localhost:8001",
                "grafana": "http://localhost:3000",
                "prometheus": "http://localhost:9090"
            }
        }
        
        with open("deployment_status.json", "w") as f:
            json.dump(status, f, indent=2)
        
        self.log("‚úÖ Deployment finalizado")
        
        # Mostrar informa√ß√µes finais
        print("\n" + "="*60)
        print("üéâ SISTEMA AUTOCURA DEPLOYADO COM SUCESSO!")
        print("="*60)
        print("üìç Endpoints dispon√≠veis:")
        print("   üîó API AutoCura: http://localhost:8001")
        print("   üìä Grafana: http://localhost:3000")
        print("   üìà Prometheus: http://localhost:9090")
        print("\nüîê Credenciais:")
        print("   Grafana: admin / [GRAFANA_PASSWORD]")
        print("\nüìã Pr√≥ximos passos:")
        print("   1. Configurar dom√≠nio e SSL")
        print("   2. Configurar backup autom√°tico")
        print("   3. Configurar alertas")
        print("   4. Testar casos de uso espec√≠ficos")
        print("="*60)
    
    async def rollback(self):
        """Rollback em caso de erro"""
        
        self.log("üîÑ Executando rollback...", "WARNING")
        
        try:
            subprocess.run(["docker-compose", "-f", "docker-compose.production.yml", 
                          "down"], check=True)
            self.log("‚úÖ Rollback conclu√≠do")
        except Exception as e:
            self.log(f"‚ùå Erro no rollback: {e}", "ERROR")

async def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ Sistema AutoCura - Deploy em Produ√ß√£o")
    print("=" * 50)
    
    deployer = ProductionDeployer()
    
    try:
        await deployer.deploy()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Deploy interrompido pelo usu√°rio")
        await deployer.rollback()
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico no deploy: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 