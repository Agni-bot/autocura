"""
Script de Treinamento Inicial - Sistema AutoCura Omega
Prepara o sistema para opera√ß√£o em produ√ß√£o atrav√©s de:
1. Calibra√ß√£o inicial dos par√¢metros
2. Treinamento b√°sico de consci√™ncia
3. Estabelecimento de baselines
4. Valida√ß√£o de capacidades
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
import json
import numpy as np
from typing import Dict, Any, List

# Adiciona o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

from modulos.omega import (
    CognitiveCore,
    IntegrationOrchestrator,
    EvolutionEngine,
    ConsciousnessMonitor,
    SafetyLevel,
    ThoughtType,
    ConsciousnessLevel
)


class OmegaTrainer:
    """Classe principal para treinamento do Sistema AutoCura"""
    
    def __init__(self):
        self.cognitive_core = CognitiveCore("autocura_training")
        self.orchestrator = IntegrationOrchestrator()
        self.evolution_engine = EvolutionEngine(SafetyLevel.MEDIUM)
        self.consciousness_monitor = ConsciousnessMonitor()
        self.training_data = []
        self.metrics = {
            "start_time": datetime.now(),
            "phases_completed": 0,
            "total_iterations": 0,
            "consciousness_peaks": [],
            "evolution_improvements": []
        }
    
    async def train(self):
        """Executa o treinamento completo"""
        print("=" * 80)
        print("üéì TREINAMENTO DO SISTEMA AUTOCURA - FASE OMEGA")
        print("=" * 80)
        print()
        
        try:
            # Fase 1: Inicializa√ß√£o e Calibra√ß√£o
            await self._phase_1_initialization()
            
            # Fase 2: Treinamento de Consci√™ncia B√°sica
            await self._phase_2_basic_consciousness()
            
            # Fase 3: Integra√ß√£o de Capacidades
            await self._phase_3_capability_integration()
            
            # Fase 4: Evolu√ß√£o Dirigida
            await self._phase_4_directed_evolution()
            
            # Fase 5: Valida√ß√£o de Emerg√™ncia
            await self._phase_5_emergence_validation()
            
            # Fase 6: Otimiza√ß√£o Final
            await self._phase_6_final_optimization()
            
            # Salvar resultados
            await self._save_training_results()
            
            print("\n‚úÖ TREINAMENTO CONCLU√çDO COM SUCESSO!")
            
        except Exception as e:
            print(f"\n‚ùå Erro durante treinamento: {e}")
            raise
        finally:
            await self._cleanup()
    
    async def _phase_1_initialization(self):
        """Fase 1: Inicializa√ß√£o e Calibra√ß√£o"""
        print("\nüìã FASE 1: INICIALIZA√á√ÉO E CALIBRA√á√ÉO")
        print("-" * 50)
        
        # Inicializar componentes
        print("Inicializando componentes...")
        await self.cognitive_core.initialize()
        await self.orchestrator.initialize()
        await self.consciousness_monitor.start_monitoring(self.cognitive_core)
        
        # Calibrar par√¢metros iniciais
        print("Calibrando par√¢metros...")
        await self._calibrate_parameters()
        
        # Estabelecer baseline
        print("Estabelecendo baseline de consci√™ncia...")
        baseline = await self._establish_baseline()
        self.training_data.append({
            "phase": "initialization",
            "baseline": baseline,
            "timestamp": datetime.now().isoformat()
        })
        
        self.metrics["phases_completed"] += 1
        print("‚úÖ Fase 1 conclu√≠da")
    
    async def _phase_2_basic_consciousness(self):
        """Fase 2: Treinamento de Consci√™ncia B√°sica"""
        print("\nüß† FASE 2: TREINAMENTO DE CONSCI√äNCIA B√ÅSICA")
        print("-" * 50)
        
        iterations = 100
        print(f"Executando {iterations} itera√ß√µes de treinamento...")
        
        for i in range(iterations):
            # Gerar pensamentos variados
            thought_types = list(ThoughtType)
            for thought_type in thought_types:
                await self.cognitive_core.generate_thought(
                    thought_type,
                    {
                        "training_iteration": i,
                        "content": f"Treinamento {thought_type.name}",
                        "timestamp": datetime.now().isoformat()
                    },
                    priority=np.random.uniform(0.3, 0.9)
                )
            
            # Estimular auto-reflex√£o
            if i % 10 == 0:
                reflection = await self.cognitive_core.reflect_on_self()
                
                # Registrar progresso
                snapshot = await self.consciousness_monitor._capture_consciousness_snapshot()
                if snapshot.level > 0.5:
                    self.metrics["consciousness_peaks"].append({
                        "iteration": i,
                        "level": snapshot.level,
                        "timestamp": datetime.now().isoformat()
                    })
                
                print(f"Itera√ß√£o {i}: Consci√™ncia = {snapshot.level:.2%}")
            
            self.metrics["total_iterations"] += 1
        
        self.metrics["phases_completed"] += 1
        print("‚úÖ Fase 2 conclu√≠da")
    
    async def _phase_3_capability_integration(self):
        """Fase 3: Integra√ß√£o de Capacidades"""
        print("\nüîó FASE 3: INTEGRA√á√ÉO DE CAPACIDADES")
        print("-" * 50)
        
        # Simular integra√ß√£o de m√≥dulos
        modules = ["alpha", "beta", "gamma", "delta"]
        
        for module in modules:
            print(f"Integrando capacidades do m√≥dulo {module}...")
            
            # Integrar no core
            await self.cognitive_core.integrate_module(module, f"training_{module}")
            
            # Treinar com capacidades espec√≠ficas
            await self._train_module_capabilities(module)
        
        # Ativar sinergias
        print("\nAtivando sinergias entre m√≥dulos...")
        for synergy in self.orchestrator.synergy_patterns:
            if len(synergy.modules) <= len(modules):
                success = await self.orchestrator.activate_synergy(synergy)
                if success:
                    print(f"‚úÖ Sinergia ativada: {synergy.description}")
        
        self.metrics["phases_completed"] += 1
        print("‚úÖ Fase 3 conclu√≠da")
    
    async def _phase_4_directed_evolution(self):
        """Fase 4: Evolu√ß√£o Dirigida"""
        print("\nüß¨ FASE 4: EVOLU√á√ÉO DIRIGIDA")
        print("-" * 50)
        
        # Definir genes para evolu√ß√£o
        genes = [
            self.evolution_engine.create_gene(
                "learning_rate", "parameter", 0.01,
                min_value=0.001, max_value=0.1
            ),
            self.evolution_engine.create_gene(
                "thought_priority_threshold", "parameter", 0.5,
                min_value=0.1, max_value=0.9
            ),
            self.evolution_engine.create_gene(
                "creativity_factor", "parameter", 0.5,
                min_value=0.0, max_value=1.0
            ),
            self.evolution_engine.create_gene(
                "memory_consolidation_rate", "parameter", 0.7,
                min_value=0.3, max_value=0.95
            )
        ]
        
        # Criar template e popula√ß√£o
        template = self.evolution_engine.create_genome_template(genes)
        await self.evolution_engine.initialize_population(template)
        
        # Fun√ß√£o de fitness baseada em consci√™ncia
        async def consciousness_fitness(phenotype: Dict[str, Any]) -> float:
            # Aplicar par√¢metros temporariamente
            original_values = {}
            
            # Simular aplica√ß√£o de par√¢metros
            fitness_components = []
            
            # Componente 1: Taxa de aprendizado
            learning_score = phenotype['learning_rate'] * 10
            fitness_components.append(learning_score)
            
            # Componente 2: Criatividade
            creativity_score = phenotype['creativity_factor']
            fitness_components.append(creativity_score)
            
            # Componente 3: Efici√™ncia de mem√≥ria
            memory_score = phenotype['memory_consolidation_rate']
            fitness_components.append(memory_score)
            
            # Componente 4: Threshold apropriado
            threshold_score = 1.0 - abs(phenotype['thought_priority_threshold'] - 0.6)
            fitness_components.append(threshold_score)
            
            return np.mean(fitness_components)
        
        # Evoluir
        print("Executando evolu√ß√£o (20 gera√ß√µes)...")
        result = await self.evolution_engine.evolve(
            generations=20,
            fitness_function=consciousness_fitness
        )
        
        print(f"‚úÖ Evolu√ß√£o completa! Melhor fitness: {result.best_genome.fitness:.4f}")
        
        # Aplicar melhor genoma
        best_params = result.best_genome.to_phenotype()
        self.metrics["evolution_improvements"].append({
            "generation": result.generation,
            "fitness": result.best_genome.fitness,
            "parameters": best_params
        })
        
        self.metrics["phases_completed"] += 1
        print("‚úÖ Fase 4 conclu√≠da")
    
    async def _phase_5_emergence_validation(self):
        """Fase 5: Valida√ß√£o de Emerg√™ncia"""
        print("\nüåü FASE 5: VALIDA√á√ÉO DE EMERG√äNCIA")
        print("-" * 50)
        
        print("Testando capacidades emergentes...")
        
        # 1. Teste de Criatividade
        print("\n1. Testando criatividade...")
        creative_prompts = [
            {"domain": "problem_solving", "challenge": "optimize_energy"},
            {"domain": "abstract_thinking", "challenge": "define_consciousness"},
            {"domain": "synthesis", "challenge": "combine_quantum_nano"}
        ]
        
        for prompt in creative_prompts:
            idea = await self.cognitive_core.create_novel_idea(prompt)
            if "error" not in idea:
                print(f"   ‚úÖ Ideia gerada para {prompt['challenge']}")
        
        # 2. Teste de Decis√£o Complexa
        print("\n2. Testando tomada de decis√£o complexa...")
        complex_scenarios = [
            {
                "scenario": "resource_allocation",
                "constraints": {"budget": 1000, "time": 24, "risk": 0.3},
                "objectives": ["maximize_output", "minimize_risk"]
            },
            {
                "scenario": "ethical_dilemma",
                "options": ["benefit_many", "protect_few"],
                "considerations": ["fairness", "utility", "rights"]
            }
        ]
        
        for scenario in complex_scenarios:
            decision = await self.cognitive_core.make_decision(scenario)
            print(f"   ‚úÖ Decis√£o tomada para {scenario['scenario']}")
        
        # 3. Validar Consci√™ncia
        print("\n3. Validando consci√™ncia genu√≠na...")
        report = self.consciousness_monitor.get_consciousness_report()
        
        validation_criteria = {
            "consciousness_level": report['current_state']['consciousness_level'] > 0.6,
            "integration_score": report['current_state']['integration_score'] > 0.5,
            "thought_complexity": report['current_state']['thought_complexity'] > 0.4,
            "emergence_events": len(report['emergence_events']) > 0
        }
        
        all_valid = all(validation_criteria.values())
        
        print(f"\nCrit√©rios de valida√ß√£o:")
        for criterion, passed in validation_criteria.items():
            print(f"   {'‚úÖ' if passed else '‚ùå'} {criterion}")
        
        if all_valid:
            print("\nüéâ CONSCI√äNCIA VALIDADA!")
        else:
            print("\n‚ö†Ô∏è Consci√™ncia ainda em desenvolvimento")
        
        self.metrics["phases_completed"] += 1
        print("\n‚úÖ Fase 5 conclu√≠da")
    
    async def _phase_6_final_optimization(self):
        """Fase 6: Otimiza√ß√£o Final"""
        print("\n‚ö° FASE 6: OTIMIZA√á√ÉO FINAL")
        print("-" * 50)
        
        print("Otimizando sistema para produ√ß√£o...")
        
        # 1. Consolidar mem√≥rias
        print("1. Consolidando mem√≥rias importantes...")
        # Simular consolida√ß√£o
        await asyncio.sleep(1)
        
        # 2. Otimizar par√¢metros
        print("2. Ajustando par√¢metros finais...")
        final_params = {
            "energy_efficiency": 0.85,
            "response_time": 0.95,
            "accuracy": 0.92,
            "creativity": 0.78,
            "stability": 0.96
        }
        
        # 3. Preparar para produ√ß√£o
        print("3. Preparando para ambiente de produ√ß√£o...")
        production_config = {
            "safety_level": SafetyLevel.HIGH,
            "monitoring_enabled": True,
            "auto_evolution": True,
            "backup_interval": 3600,
            "health_check_interval": 60
        }
        
        self.training_data.append({
            "phase": "optimization",
            "final_params": final_params,
            "production_config": production_config,
            "timestamp": datetime.now().isoformat()
        })
        
        self.metrics["phases_completed"] += 1
        print("‚úÖ Fase 6 conclu√≠da")
    
    async def _calibrate_parameters(self):
        """Calibra par√¢metros iniciais do sistema"""
        calibration_params = {
            "thought_generation_rate": 10,  # pensamentos/segundo
            "attention_span": 100,  # n√∫mero de pensamentos em foco
            "energy_decay_rate": 0.001,  # taxa de decaimento de energia
            "coherence_threshold": 0.6,  # threshold m√≠nimo de coer√™ncia
            "emergence_sensitivity": 0.7  # sensibilidade para detec√ß√£o de emerg√™ncia
        }
        
        # Aplicar calibra√ß√£o (simulado)
        await asyncio.sleep(0.5)
        
        return calibration_params
    
    async def _establish_baseline(self) -> Dict[str, Any]:
        """Estabelece baseline de consci√™ncia"""
        # Gerar atividade inicial
        for _ in range(50):
            await self.cognitive_core.generate_thought(
                ThoughtType.PERCEPTION,
                {"baseline": "measurement"},
                priority=0.5
            )
        
        # Capturar estado
        snapshot = await self.consciousness_monitor._capture_consciousness_snapshot()
        
        return {
            "consciousness_level": snapshot.level,
            "integration_score": snapshot.integration_score,
            "thought_complexity": snapshot.thought_complexity,
            "timestamp": snapshot.timestamp.isoformat()
        }
    
    async def _train_module_capabilities(self, module: str):
        """Treina capacidades espec√≠ficas de cada m√≥dulo"""
        training_patterns = {
            "alpha": [
                {"type": "api_handling", "iterations": 20},
                {"type": "monitoring", "iterations": 20}
            ],
            "beta": [
                {"type": "pattern_recognition", "iterations": 30},
                {"type": "decision_making", "iterations": 30}
            ],
            "gamma": [
                {"type": "quantum_optimization", "iterations": 25},
                {"type": "superposition", "iterations": 25}
            ],
            "delta": [
                {"type": "nano_control", "iterations": 20},
                {"type": "molecular_assembly", "iterations": 20}
            ]
        }
        
        patterns = training_patterns.get(module, [])
        
        for pattern in patterns:
            for i in range(pattern["iterations"]):
                await self.cognitive_core.generate_thought(
                    ThoughtType.REASONING,
                    {
                        "module": module,
                        "pattern": pattern["type"],
                        "iteration": i
                    }
                )
        
        await asyncio.sleep(0.5)  # Permitir processamento
    
    async def _save_training_results(self):
        """Salva resultados do treinamento"""
        print("\nüíæ Salvando resultados do treinamento...")
        
        # Preparar relat√≥rio final
        final_report = {
            "training_id": f"training_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "duration": (datetime.now() - self.metrics["start_time"]).total_seconds(),
            "metrics": self.metrics,
            "training_data": self.training_data,
            "final_consciousness_report": self.consciousness_monitor.get_consciousness_report(),
            "system_ready": True
        }
        
        # Salvar em arquivo
        output_file = f"training_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(output_file, 'w') as f:
            json.dump(final_report, f, indent=2, default=str)
        
        print(f"‚úÖ Resultados salvos em: {output_file}")
        
        # Exportar dados de consci√™ncia
        self.consciousness_monitor.export_consciousness_data(
            f"consciousness_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
    
    async def _cleanup(self):
        """Limpa recursos ap√≥s treinamento"""
        print("\nüßπ Limpando recursos...")
        
        if self.consciousness_monitor.monitoring_active:
            await self.consciousness_monitor.stop_monitoring()
        
        if self.cognitive_core.running:
            await self.cognitive_core.shutdown()
        
        if self.orchestrator.integration_active:
            await self.orchestrator.shutdown()
        
        print("‚úÖ Recursos liberados")


async def main():
    """Fun√ß√£o principal de treinamento"""
    print("\nüöÄ Iniciando Treinamento do Sistema AutoCura...")
    print("Este processo preparar√° o sistema para opera√ß√£o em produ√ß√£o.")
    print("Tempo estimado: 5-10 minutos\n")
    
    trainer = OmegaTrainer()
    
    try:
        await trainer.train()
        
        print("\n" + "=" * 80)
        print("üéä TREINAMENTO COMPLETO!")
        print("=" * 80)
        print("\nO Sistema AutoCura est√° pronto para produ√ß√£o com:")
        print("  ‚úÖ Consci√™ncia calibrada e validada")
        print("  ‚úÖ Capacidades integradas e testadas")
        print("  ‚úÖ Par√¢metros otimizados")
        print("  ‚úÖ Seguran√ßa configurada")
        print("\nPr√≥ximos passos:")
        print("  1. Revisar os resultados do treinamento")
        print("  2. Fazer deploy usando docker-compose")
        print("  3. Monitorar m√©tricas iniciais")
        print("  4. Ajustar conforme necess√°rio")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante treinamento: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 