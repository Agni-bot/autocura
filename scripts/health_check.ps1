# Script para verificar a sa√∫de do sistema AutoCura

# Cores para output
$Green = [System.ConsoleColor]::Green
$Yellow = [System.ConsoleColor]::Yellow
$Red = [System.ConsoleColor]::Red

# Fun√ß√£o para verificar endpoint
function Test-Endpoint {
    param (
        [string]$Url,
        [string]$Service
    )
    
    try {
        $response = Invoke-RestMethod -Uri $Url -Method Get -TimeoutSec 5
        if ($response.status -eq "ok") {
            Write-Host "‚úÖ $Service est√° saud√°vel" -ForegroundColor $Green
            return $true
        } else {
            Write-Host "‚ùå $Service retornou status n√£o esperado" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå $Service n√£o est√° respondendo: $_" -ForegroundColor $Red
        return $false
    }
}

# Fun√ß√£o para verificar m√©tricas
function Test-Metrics {
    param (
        [string]$Service
    )
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:9090/metrics" -Method Get -TimeoutSec 5
        if ($response -match $Service) {
            Write-Host "‚úÖ M√©tricas do $Service est√£o sendo coletadas" -ForegroundColor $Green
            return $true
        } else {
            Write-Host "‚ùå M√©tricas do $Service n√£o encontradas" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå N√£o foi poss√≠vel acessar m√©tricas: $_" -ForegroundColor $Red
        return $false
    }
}

# Fun√ß√£o para verificar logs
function Test-Logs {
    param (
        [string]$Service
    )
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:8080/logs?limit=1&service=$Service" -Method Get -TimeoutSec 5
        if ($response.logs.Count -gt 0) {
            Write-Host "‚úÖ Logs do $Service est√£o sendo gerados" -ForegroundColor $Green
            return $true
        } else {
            Write-Host "‚ùå Nenhum log encontrado para $Service" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå N√£o foi poss√≠vel acessar logs: $_" -ForegroundColor $Red
        return $false
    }
}

Write-Host "üîç Iniciando verifica√ß√£o de sa√∫de do sistema..." -ForegroundColor $Yellow

# Verificar containers
Write-Host "`nüì° Verificando containers..." -ForegroundColor $Yellow
$containers = docker-compose -f docker/docker-compose.testados.yml ps --format json | ConvertFrom-Json

$allRunning = $true
foreach ($container in $containers) {
    if ($container.State -ne "running") {
        Write-Host "‚ùå Container $($container.Service) n√£o est√° rodando" -ForegroundColor $Red
        $allRunning = $false
    } else {
        Write-Host "‚úÖ Container $($container.Service) est√° rodando" -ForegroundColor $Green
    }
}

if (-not $allRunning) {
    Write-Host "‚ùå Alguns containers n√£o est√£o rodando corretamente" -ForegroundColor $Red
    exit 1
}

# Verificar endpoints
Write-Host "`nüåê Verificando endpoints..." -ForegroundColor $Yellow

$endpoints = @(
    @{Url = "http://localhost:9090/health"; Service = "Monitor"},
    @{Url = "http://localhost:8080/health"; Service = "Observador"},
    @{Url = "http://localhost:8080/health"; Service = "Validador"},
    @{Url = "http://localhost:8080/health"; Service = "Guardi√£o"}
)

$allHealthy = $true
foreach ($endpoint in $endpoints) {
    if (-not (Test-Endpoint -Url $endpoint.Url -Service $endpoint.Service)) {
        $allHealthy = $false
    }
}

# Verificar m√©tricas
Write-Host "`nüìä Verificando m√©tricas..." -ForegroundColor $Yellow

$services = @("monitor", "observador", "validador", "guardiao")
$allMetrics = $true
foreach ($service in $services) {
    if (-not (Test-Metrics -Service $service)) {
        $allMetrics = $false
    }
}

# Verificar logs
Write-Host "`nüìù Verificando logs..." -ForegroundColor $Yellow

$allLogs = $true
foreach ($service in $services) {
    if (-not (Test-Logs -Service $service)) {
        $allLogs = $false
    }
}

# Gerar relat√≥rio
Write-Host "`nüìã Relat√≥rio de Sa√∫de do Sistema" -ForegroundColor $Yellow
Write-Host "----------------------------------------" -ForegroundColor $Yellow

if ($allRunning -and $allHealthy -and $allMetrics -and $allLogs) {
    Write-Host "‚úÖ Sistema est√° saud√°vel" -ForegroundColor $Green
} else {
    Write-Host "‚ùå Sistema apresenta problemas" -ForegroundColor $Red
    if (-not $allRunning) { Write-Host "   - Containers n√£o est√£o todos rodando" -ForegroundColor $Red }
    if (-not $allHealthy) { Write-Host "   - Endpoints n√£o est√£o todos saud√°veis" -ForegroundColor $Red }
    if (-not $allMetrics) { Write-Host "   - M√©tricas n√£o est√£o sendo coletadas corretamente" -ForegroundColor $Red }
    if (-not $allLogs) { Write-Host "   - Logs n√£o est√£o sendo gerados corretamente" -ForegroundColor $Red }
}

# Verificar recursos
Write-Host "`nüíª Recursos do Sistema" -ForegroundColor $Yellow
Write-Host "----------------------------------------" -ForegroundColor $Yellow

# CPU
$cpu = Get-Counter '\Processor(_Total)\% Processor Time' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
Write-Host "CPU: $cpu% utilizado" -ForegroundColor $(if ($cpu -gt 80) { $Red } elseif ($cpu -gt 60) { $Yellow } else { $Green })

# Mem√≥ria
$memory = Get-Counter '\Memory\% Committed Bytes In Use' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
Write-Host "Mem√≥ria: $memory% utilizada" -ForegroundColor $(if ($memory -gt 80) { $Red } elseif ($memory -gt 60) { $Yellow } else { $Green })

# Disco
$disk = Get-Counter '\LogicalDisk(_Total)\% Free Space' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
Write-Host "Disco: $disk% livre" -ForegroundColor $(if ($disk -lt 20) { $Red } elseif ($disk -lt 40) { $Yellow } else { $Green }) 