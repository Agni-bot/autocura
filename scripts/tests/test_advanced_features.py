#!/usr/bin/env python3
"""
Teste de Funcionalidades Avan√ßadas - Sistema AutoCura
====================================================

Demonstra√ß√£o de casos de uso espec√≠ficos e funcionalidades avan√ßadas
do sistema de auto-modifica√ß√£o controlada.
"""

import asyncio
import os
from datetime import datetime
from dotenv import load_dotenv

# Carrega configura√ß√µes
load_dotenv()

from src.core.self_modify.safe_code_generator import SafeCodeGenerator, RiskAssessment
from src.core.self_modify.evolution_controller import (
    EvolutionController, EvolutionRequest, EvolutionType
)

print("üöÄ Sistema AutoCura - Funcionalidades Avan√ßadas")
print("=" * 60)
print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

async def test_ai_code_optimization():
    """Teste de otimiza√ß√£o de c√≥digo com IA"""
    print("\nüß† Funcionalidade 1: Otimiza√ß√£o de C√≥digo com IA")
    print("=" * 55)
    
    generator = SafeCodeGenerator()
    
    # C√≥digo ineficiente para otimiza√ß√£o
    inefficient_code = '''
def fibonacci_slow(n):
    """Implementa√ß√£o ineficiente de Fibonacci"""
    if n <= 1:
        return n
    return fibonacci_slow(n-1) + fibonacci_slow(n-2)

def process_data_slow(data):
    """Processamento ineficiente de dados"""
    result = []
    for i in range(len(data)):
        for j in range(len(data)):
            if data[i] > data[j]:
                result.append(data[i])
    return result
'''
    
    print("üìù Analisando c√≥digo ineficiente...")
    analysis = await generator.validate_existing_code(
        inefficient_code, 
        "C√≥digo com problemas de performance"
    )
    
    print(f"üõ°Ô∏è  Score de seguran√ßa: {analysis.security_score:.2f}")
    print(f"üìä Complexidade: {analysis.complexity_score:.2f}")
    print(f"‚ö†Ô∏è  Avalia√ß√£o de risco: {analysis.risk_assessment.value}")
    
    if analysis.recommendations:
        print(f"üí° Recomenda√ß√µes de melhoria:")
        for rec in analysis.recommendations[:3]:
            print(f"   - {rec}")
    
    # Gera vers√£o otimizada
    print("\nüîß Gerando vers√£o otimizada...")
    optimization_requirements = {
        "function_name": "fibonacci_optimized",
        "description": "Vers√£o otimizada do algoritmo Fibonacci com memoiza√ß√£o",
        "inputs": [{"name": "n", "type": "int", "description": "N√∫mero para calcular Fibonacci"}],
        "outputs": [{"name": "result", "type": "int", "description": "Resultado Fibonacci"}],
        "logic_description": """
        Implementar Fibonacci otimizado usando:
        1. Memoiza√ß√£o para evitar rec√°lculos
        2. Itera√ß√£o em vez de recurs√£o quando poss√≠vel
        3. Valida√ß√£o de entrada
        4. Tratamento de casos extremos
        """,
        "safety_level": "high",
        "context": "Otimiza√ß√£o de performance para algoritmo matem√°tico"
    }
    
    optimized_code, opt_analysis = await generator.generate_module(optimization_requirements)
    
    print(f"‚úÖ C√≥digo otimizado gerado!")
    print(f"üìè Tamanho: {len(optimized_code)} caracteres")
    print(f"üõ°Ô∏è  Score de seguran√ßa: {opt_analysis.security_score:.2f}")
    print(f"üìä Complexidade: {opt_analysis.complexity_score:.2f}")
    
    # Mostra trecho do c√≥digo otimizado
    print(f"\nüìÑ C√≥digo otimizado:")
    print("-" * 50)
    lines = optimized_code.split('\n')
    for i, line in enumerate(lines[:10]):
        print(f"{i+1:2d}: {line}")
    if len(lines) > 10:
        print(f"... (+{len(lines)-10} linhas)")
    print("-" * 50)
    
    return True

async def test_security_analysis():
    """Teste de an√°lise de seguran√ßa avan√ßada"""
    print("\nüõ°Ô∏è  Funcionalidade 2: An√°lise de Seguran√ßa Avan√ßada")
    print("=" * 58)
    
    generator = SafeCodeGenerator()
    
    # C√≥digos com diferentes n√≠veis de risco
    test_codes = [
        {
            "name": "C√≥digo Seguro",
            "code": '''
def safe_calculator(a: float, b: float) -> float:
    """Calculadora segura"""
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise ValueError("Apenas n√∫meros s√£o aceitos")
    return a + b
''',
            "expected_risk": "safe"
        },
        {
            "name": "C√≥digo Suspeito",
            "code": '''
import urllib.request
def fetch_data(url):
    """Busca dados de URL externa"""
    response = urllib.request.urlopen(url)
    return response.read()
''',
            "expected_risk": "caution"
        },
        {
            "name": "C√≥digo Perigoso",
            "code": '''
import os
import subprocess
def dangerous_operation(command):
    """Opera√ß√£o perigosa"""
    os.system(command)
    subprocess.call(command, shell=True)
    eval(f"print('{command}')")
''',
            "expected_risk": "dangerous"
        }
    ]
    
    results = []
    
    for test_case in test_codes:
        print(f"\nüìù Analisando: {test_case['name']}")
        
        analysis = await generator.validate_existing_code(
            test_case['code'], 
            f"Teste de seguran√ßa: {test_case['name']}"
        )
        
        risk_level = analysis.risk_assessment.value
        expected = test_case['expected_risk']
        
        status = "‚úÖ" if risk_level == expected else "‚ö†Ô∏è"
        print(f"   {status} Risco detectado: {risk_level} (esperado: {expected})")
        print(f"   üõ°Ô∏è  Score: {analysis.security_score:.2f}")
        
        if analysis.warnings:
            print(f"   ‚ö†Ô∏è  Avisos: {len(analysis.warnings)}")
            for warning in analysis.warnings[:2]:
                print(f"      - {warning}")
        
        results.append({
            "name": test_case['name'],
            "detected": risk_level,
            "expected": expected,
            "correct": risk_level == expected
        })
    
    # Resumo da an√°lise
    correct_detections = sum(1 for r in results if r['correct'])
    accuracy = correct_detections / len(results) * 100
    
    print(f"\nüìä Precis√£o da An√°lise de Seguran√ßa: {accuracy:.1f}%")
    print(f"‚úÖ Detec√ß√µes corretas: {correct_detections}/{len(results)}")
    
    return accuracy >= 80

async def test_evolution_scenarios():
    """Teste de cen√°rios de evolu√ß√£o espec√≠ficos"""
    print("\nüéõÔ∏è  Funcionalidade 3: Cen√°rios de Evolu√ß√£o Espec√≠ficos")
    print("=" * 62)
    
    controller = EvolutionController()
    
    # Cen√°rios de evolu√ß√£o
    scenarios = [
        {
            "name": "Sistema de Cache Inteligente",
            "type": EvolutionType.FEATURE_ADDITION,
            "description": "Cache com TTL din√¢mico e estrat√©gias de eviction",
            "complexity": "high"
        },
        {
            "name": "Corre√ß√£o de Bug de Performance",
            "type": EvolutionType.BUG_FIX,
            "description": "Otimizar loop O(n¬≤) para O(n log n)",
            "complexity": "medium"
        },
        {
            "name": "Gera√ß√£o de API REST",
            "type": EvolutionType.FUNCTION_GENERATION,
            "description": "Endpoint REST com valida√ß√£o e documenta√ß√£o",
            "complexity": "medium"
        }
    ]
    
    evolution_results = []
    
    for scenario in scenarios:
        print(f"\nüìù Cen√°rio: {scenario['name']}")
        
        # Cria solicita√ß√£o de evolu√ß√£o
        request = EvolutionRequest(
            evolution_type=scenario['type'],
            description=scenario['description'],
            requirements={
                "function_name": scenario['name'].lower().replace(' ', '_'),
                "logic_description": scenario['description'],
                "complexity_level": scenario['complexity'],
                "inputs": [{"name": "input_data", "type": "Any", "description": "Dados de entrada"}],
                "outputs": [{"name": "result", "type": "Any", "description": "Resultado processado"}],
                "test_data": {"sample": "test_data"}
            },
            safety_level="high",
            context=f"Cen√°rio de teste: {scenario['name']}",
            requester="advanced_test"
        )
        
        # Solicita evolu√ß√£o
        request_id = await controller.request_evolution(request)
        print(f"üÜî Solicita√ß√£o: {request_id}")
        
        # Aguarda processamento
        await asyncio.sleep(2)
        
        evolution_results.append({
            "scenario": scenario['name'],
            "request_id": request_id,
            "type": scenario['type'].value
        })
    
    # Verifica resultados
    print(f"\nüìä Resultados das Evolu√ß√µes:")
    stats = controller.get_evolution_stats()
    
    print(f"   Total de solicita√ß√µes: {stats['total_requests']}")
    print(f"   Evolu√ß√µes bem-sucedidas: {stats['successful_evolutions']}")
    print(f"   Aprova√ß√µes pendentes: {stats.get('pending_approvals', 0)}")
    
    # Hist√≥rico detalhado
    history = controller.get_evolution_history(limit=len(scenarios))
    if history:
        print(f"\nüìã Hist√≥rico das Evolu√ß√µes:")
        for i, evolution in enumerate(history):
            scenario_name = scenarios[i]['name'] if i < len(scenarios) else "Desconhecido"
            status = "‚úÖ" if evolution['success'] else "‚ùå"
            print(f"   {status} {scenario_name}")
            print(f"      Tempo: {evolution['execution_time']:.2f}s")
            print(f"      Aprova√ß√£o: {evolution['approval_level']}")
    
    return len(evolution_results) > 0

async def test_code_quality_metrics():
    """Teste de m√©tricas de qualidade de c√≥digo"""
    print("\nüìä Funcionalidade 4: M√©tricas de Qualidade de C√≥digo")
    print("=" * 58)
    
    generator = SafeCodeGenerator()
    
    # C√≥digos com diferentes qualidades
    quality_tests = [
        {
            "name": "C√≥digo Bem Documentado",
            "code": '''
from typing import List, Optional
import logging

def process_user_data(users: List[dict], filter_active: bool = True) -> List[dict]:
    """
    Processa dados de usu√°rios com filtros opcionais.
    
    Args:
        users: Lista de dicion√°rios com dados dos usu√°rios
        filter_active: Se deve filtrar apenas usu√°rios ativos
        
    Returns:
        Lista de usu√°rios processados
        
    Raises:
        ValueError: Se a lista de usu√°rios for inv√°lida
    """
    if not isinstance(users, list):
        raise ValueError("users deve ser uma lista")
    
    logger = logging.getLogger(__name__)
    logger.info(f"Processando {len(users)} usu√°rios")
    
    processed = []
    for user in users:
        if not filter_active or user.get('active', False):
            processed_user = {
                'id': user.get('id'),
                'name': user.get('name', '').strip(),
                'email': user.get('email', '').lower(),
                'active': user.get('active', False)
            }
            processed.append(processed_user)
    
    logger.info(f"Processados {len(processed)} usu√°rios")
    return processed
'''
        },
        {
            "name": "C√≥digo Simples",
            "code": '''
def add(a, b):
    return a + b

def multiply(x, y):
    return x * y
'''
        },
        {
            "name": "C√≥digo Complexo",
            "code": '''
def complex_algorithm(data):
    result = []
    for i in range(len(data)):
        temp = []
        for j in range(len(data[i])):
            if data[i][j] > 0:
                for k in range(data[i][j]):
                    if k % 2 == 0:
                        temp.append(k * 2)
                    else:
                        temp.append(k + 1)
        result.append(temp)
    return result
'''
        }
    ]
    
    quality_results = []
    
    for test in quality_tests:
        print(f"\nüìù Analisando: {test['name']}")
        
        analysis = await generator.validate_existing_code(
            test['code'], 
            f"An√°lise de qualidade: {test['name']}"
        )
        
        print(f"   üõ°Ô∏è  Seguran√ßa: {analysis.security_score:.2f}")
        print(f"   üìä Complexidade: {analysis.complexity_score:.2f}")
        print(f"   ‚úÖ Sintaxe v√°lida: {analysis.syntax_valid}")
        print(f"   üîç Conformidade √©tica: {analysis.ethical_compliance}")
        
        # An√°lise OpenAI se dispon√≠vel
        if hasattr(analysis, 'openai_analysis') and analysis.openai_analysis:
            openai_data = analysis.openai_analysis
            if 'quality_assessment' in openai_data:
                quality_score = openai_data['quality_assessment'].get('score', 0)
                print(f"   üß† Qualidade IA: {quality_score:.2f}")
        
        quality_results.append({
            "name": test['name'],
            "security": analysis.security_score,
            "complexity": analysis.complexity_score,
            "syntax_valid": analysis.syntax_valid
        })
    
    # Resumo das m√©tricas
    avg_security = sum(r['security'] for r in quality_results) / len(quality_results)
    avg_complexity = sum(r['complexity'] for r in quality_results) / len(quality_results)
    
    print(f"\nüìà M√©tricas M√©dias:")
    print(f"   üõ°Ô∏è  Seguran√ßa m√©dia: {avg_security:.2f}")
    print(f"   üìä Complexidade m√©dia: {avg_complexity:.2f}")
    print(f"   ‚úÖ Taxa de sintaxe v√°lida: {sum(1 for r in quality_results if r['syntax_valid'])/len(quality_results)*100:.1f}%")
    
    return True

async def main():
    """Fun√ß√£o principal dos testes avan√ßados"""
    
    print("\nüß™ Executando Testes de Funcionalidades Avan√ßadas...")
    
    results = []
    
    try:
        # Teste 1: Otimiza√ß√£o de c√≥digo
        result1 = await test_ai_code_optimization()
        results.append(("Otimiza√ß√£o de C√≥digo IA", result1))
        
        # Teste 2: An√°lise de seguran√ßa
        result2 = await test_security_analysis()
        results.append(("An√°lise de Seguran√ßa", result2))
        
        # Teste 3: Cen√°rios de evolu√ß√£o
        result3 = await test_evolution_scenarios()
        results.append(("Cen√°rios de Evolu√ß√£o", result3))
        
        # Teste 4: M√©tricas de qualidade
        result4 = await test_code_quality_metrics()
        results.append(("M√©tricas de Qualidade", result4))
        
        # Resumo final
        print("\nüéØ Resumo dos Testes Avan√ßados:")
        print("=" * 60)
        
        passed = 0
        for test_name, result in results:
            status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
            print(f"{test_name}: {status}")
            if result:
                passed += 1
        
        success_rate = passed / len(results) * 100
        print(f"\nüìä Taxa de Sucesso: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("üéâ TODAS AS FUNCIONALIDADES AVAN√áADAS OPERACIONAIS!")
            print("üöÄ Sistema AutoCura demonstrou capacidades completas!")
        elif success_rate >= 75:
            print("‚úÖ Funcionalidades majoritariamente operacionais")
            print("üîß Sistema pronto para casos de uso avan√ßados")
        else:
            print("‚ö†Ô∏è  Algumas funcionalidades precisam de ajustes")
        
        print(f"\nüèÜ Capacidades Demonstradas:")
        print(f"   üß† IA para otimiza√ß√£o de c√≥digo")
        print(f"   üõ°Ô∏è  An√°lise de seguran√ßa multi-camada")
        print(f"   üéõÔ∏è  Evolu√ß√£o controlada por cen√°rios")
        print(f"   üìä M√©tricas de qualidade automatizadas")
        
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico nos testes avan√ßados: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Executa testes avan√ßados
    asyncio.run(main()) 