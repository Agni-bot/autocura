#!/usr/bin/env python3
"""
Casos de Uso Espec√≠ficos - Sistema AutoCura
==========================================

Demonstra√ß√£o de aplica√ß√µes pr√°ticas do sistema de auto-modifica√ß√£o
controlada em cen√°rios reais de desenvolvimento.
"""

import asyncio
import os
from datetime import datetime
from dotenv import load_dotenv

# Carrega configura√ß√µes
load_dotenv()

from src.core.self_modify.safe_code_generator import SafeCodeGenerator
from src.core.self_modify.evolution_controller import (
    EvolutionController, EvolutionRequest, EvolutionType
)

print("üéØ Sistema AutoCura - Casos de Uso Espec√≠ficos")
print("=" * 60)
print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

async def caso_uso_1_api_microservico():
    """Caso de Uso 1: Gera√ß√£o de API para Microservi√ßo"""
    print("\nüîß Caso de Uso 1: Gera√ß√£o de API para Microservi√ßo")
    print("=" * 55)
    
    controller = EvolutionController()
    
    # Especifica√ß√µes do microservi√ßo
    api_specs = {
        "service_name": "user_management_api",
        "description": "API REST para gerenciamento de usu√°rios",
        "endpoints": [
            {"method": "GET", "path": "/users", "description": "Listar usu√°rios"},
            {"method": "POST", "path": "/users", "description": "Criar usu√°rio"},
            {"method": "GET", "path": "/users/{id}", "description": "Buscar usu√°rio"},
            {"method": "PUT", "path": "/users/{id}", "description": "Atualizar usu√°rio"},
            {"method": "DELETE", "path": "/users/{id}", "description": "Deletar usu√°rio"}
        ],
        "authentication": "JWT",
        "database": "PostgreSQL",
        "validation": "Pydantic"
    }
    
    print(f"üìù Gerando API: {api_specs['service_name']}")
    print(f"üîó Endpoints: {len(api_specs['endpoints'])}")
    
    # Solicita√ß√£o de evolu√ß√£o para API
    request = EvolutionRequest(
        evolution_type=EvolutionType.FEATURE_ADDITION,
        description=f"Gerar {api_specs['description']} completa",
        requirements={
            "function_name": "user_management_api",
            "logic_description": f"""
            Criar API REST completa com:
            1. Endpoints CRUD para usu√°rios
            2. Autentica√ß√£o JWT
            3. Valida√ß√£o com Pydantic
            4. Conex√£o PostgreSQL
            5. Tratamento de erros
            6. Documenta√ß√£o OpenAPI
            7. Testes unit√°rios
            """,
            "inputs": [
                {"name": "user_data", "type": "UserModel", "description": "Dados do usu√°rio"},
                {"name": "user_id", "type": "int", "description": "ID do usu√°rio"}
            ],
            "outputs": [
                {"name": "api_response", "type": "Dict", "description": "Resposta da API"},
                {"name": "status_code", "type": "int", "description": "C√≥digo HTTP"}
            ],
            "specifications": api_specs,
            "test_data": {
                "sample_user": {
                    "name": "Jo√£o Silva",
                    "email": "joao@example.com",
                    "role": "user"
                }
            }
        },
        safety_level="high",
        priority=1,
        context="Desenvolvimento de microservi√ßo para sistema empresarial",
        requester="desenvolvimento_backend"
    )
    
    # Executa gera√ß√£o
    request_id = await controller.request_evolution(request)
    print(f"üÜî Solicita√ß√£o criada: {request_id}")
    
    # Aguarda processamento
    await asyncio.sleep(3)
    
    # Verifica resultado
    stats = controller.get_evolution_stats()
    history = controller.get_evolution_history(limit=1)
    
    if history:
        evolution = history[0]
        print(f"‚úÖ Status: {'Sucesso' if evolution['success'] else 'Falha'}")
        print(f"‚è±Ô∏è  Tempo de gera√ß√£o: {evolution['execution_time']:.2f}s")
        print(f"üîí N√≠vel de aprova√ß√£o: {evolution['approval_level']}")
    
    print(f"üìä API gerada com sucesso para microservi√ßo!")
    return True

async def caso_uso_2_otimizacao_algoritmo():
    """Caso de Uso 2: Otimiza√ß√£o de Algoritmo de Machine Learning"""
    print("\nüß† Caso de Uso 2: Otimiza√ß√£o de Algoritmo ML")
    print("=" * 50)
    
    generator = SafeCodeGenerator()
    
    # Algoritmo original ineficiente
    algoritmo_original = '''
import numpy as np

def naive_kmeans(data, k, max_iters=100):
    """Implementa√ß√£o ing√™nua de K-means"""
    n_samples, n_features = data.shape
    
    # Inicializa√ß√£o aleat√≥ria
    centroids = data[np.random.choice(n_samples, k, replace=False)]
    
    for iteration in range(max_iters):
        # Calcular dist√¢ncias (ineficiente)
        distances = []
        for i in range(n_samples):
            sample_distances = []
            for j in range(k):
                dist = 0
                for f in range(n_features):
                    dist += (data[i][f] - centroids[j][f]) ** 2
                sample_distances.append(dist ** 0.5)
            distances.append(sample_distances)
        
        # Atribuir clusters
        labels = []
        for i in range(n_samples):
            min_dist = float('inf')
            cluster = 0
            for j in range(k):
                if distances[i][j] < min_dist:
                    min_dist = distances[i][j]
                    cluster = j
            labels.append(cluster)
        
        # Atualizar centroids (ineficiente)
        new_centroids = []
        for j in range(k):
            cluster_points = []
            for i in range(n_samples):
                if labels[i] == j:
                    cluster_points.append(data[i])
            if cluster_points:
                centroid = [0] * n_features
                for point in cluster_points:
                    for f in range(n_features):
                        centroid[f] += point[f]
                for f in range(n_features):
                    centroid[f] /= len(cluster_points)
                new_centroids.append(centroid)
            else:
                new_centroids.append(centroids[j])
        
        centroids = np.array(new_centroids)
    
    return centroids, labels
'''
    
    print("üìù Analisando algoritmo K-means original...")
    
    # An√°lise do c√≥digo original
    analysis = await generator.validate_existing_code(
        algoritmo_original,
        "Algoritmo K-means para otimiza√ß√£o"
    )
    
    print(f"üõ°Ô∏è  Seguran√ßa: {analysis.security_score:.2f}")
    print(f"üìä Complexidade: {analysis.complexity_score:.2f}")
    print(f"‚ö†Ô∏è  Risco: {analysis.risk_assessment.value}")
    
    # Gera vers√£o otimizada
    print("\nüîß Gerando vers√£o otimizada...")
    
    optimization_requirements = {
        "function_name": "optimized_kmeans",
        "description": "Algoritmo K-means otimizado para performance",
        "inputs": [
            {"name": "data", "type": "np.ndarray", "description": "Dados para clustering"},
            {"name": "k", "type": "int", "description": "N√∫mero de clusters"},
            {"name": "max_iters", "type": "int", "description": "M√°ximo de itera√ß√µes"}
        ],
        "outputs": [
            {"name": "centroids", "type": "np.ndarray", "description": "Centroids finais"},
            {"name": "labels", "type": "np.ndarray", "description": "Labels dos clusters"}
        ],
        "logic_description": """
        Implementar K-means otimizado com:
        1. Opera√ß√µes vetorizadas com NumPy
        2. C√°lculo eficiente de dist√¢ncias
        3. Inicializa√ß√£o K-means++
        4. Crit√©rio de converg√™ncia
        5. Valida√ß√£o de entrada
        6. Documenta√ß√£o completa
        """,
        "safety_level": "high",
        "context": "Otimiza√ß√£o de algoritmo de machine learning"
    }
    
    optimized_code, opt_analysis = await generator.generate_module(optimization_requirements)
    
    print(f"‚úÖ Algoritmo otimizado gerado!")
    print(f"üìè Tamanho: {len(optimized_code)} caracteres")
    print(f"üõ°Ô∏è  Seguran√ßa: {opt_analysis.security_score:.2f}")
    print(f"üìä Complexidade: {opt_analysis.complexity_score:.2f}")
    
    # Compara√ß√£o de performance estimada
    complexity_reduction = (analysis.complexity_score - opt_analysis.complexity_score) / analysis.complexity_score * 100
    print(f"üöÄ Redu√ß√£o de complexidade estimada: {complexity_reduction:.1f}%")
    
    return True

async def caso_uso_3_sistema_monitoramento():
    """Caso de Uso 3: Sistema de Monitoramento Inteligente"""
    print("\nüìä Caso de Uso 3: Sistema de Monitoramento Inteligente")
    print("=" * 60)
    
    controller = EvolutionController()
    
    # Especifica√ß√µes do sistema de monitoramento
    monitoring_specs = {
        "system_name": "intelligent_monitoring",
        "components": [
            "Coleta de m√©tricas em tempo real",
            "Detec√ß√£o de anomalias com ML",
            "Alertas inteligentes",
            "Dashboard adaptativo",
            "Auto-scaling baseado em padr√µes"
        ],
        "metrics": [
            "CPU, Mem√≥ria, Disco, Rede",
            "Lat√™ncia de aplica√ß√£o",
            "Taxa de erro",
            "Throughput",
            "M√©tricas de neg√≥cio"
        ],
        "integrations": ["Prometheus", "Grafana", "Elasticsearch", "Slack"]
    }
    
    print(f"üìù Gerando: {monitoring_specs['system_name']}")
    print(f"üîß Componentes: {len(monitoring_specs['components'])}")
    
    # Solicita√ß√£o de evolu√ß√£o
    request = EvolutionRequest(
        evolution_type=EvolutionType.FEATURE_ADDITION,
        description="Sistema de monitoramento com IA para detec√ß√£o de anomalias",
        requirements={
            "function_name": "intelligent_monitoring_system",
            "logic_description": """
            Criar sistema de monitoramento inteligente com:
            1. Coleta de m√©tricas multi-fonte
            2. Algoritmos de detec√ß√£o de anomalias
            3. Sistema de alertas adaptativos
            4. Dashboard em tempo real
            5. Predi√ß√£o de problemas
            6. Auto-remediation b√°sica
            """,
            "inputs": [
                {"name": "metrics_data", "type": "Dict", "description": "Dados de m√©tricas"},
                {"name": "config", "type": "MonitoringConfig", "description": "Configura√ß√£o"}
            ],
            "outputs": [
                {"name": "alerts", "type": "List[Alert]", "description": "Alertas gerados"},
                {"name": "predictions", "type": "Dict", "description": "Predi√ß√µes"}
            ],
            "specifications": monitoring_specs,
            "test_data": {
                "sample_metrics": {
                    "cpu_usage": 85.5,
                    "memory_usage": 78.2,
                    "response_time": 250,
                    "error_rate": 0.02
                }
            }
        },
        safety_level="high",
        priority=2,
        context="Sistema de monitoramento para infraestrutura cr√≠tica",
        requester="devops_team"
    )
    
    # Executa gera√ß√£o
    request_id = await controller.request_evolution(request)
    print(f"üÜî Solicita√ß√£o criada: {request_id}")
    
    # Aguarda processamento
    await asyncio.sleep(3)
    
    # Verifica resultado
    history = controller.get_evolution_history(limit=1)
    
    if history:
        evolution = history[0]
        print(f"‚úÖ Status: {'Sucesso' if evolution['success'] else 'Falha'}")
        print(f"‚è±Ô∏è  Tempo de gera√ß√£o: {evolution['execution_time']:.2f}s")
        print(f"üîí N√≠vel de aprova√ß√£o: {evolution['approval_level']}")
    
    print(f"üìä Sistema de monitoramento inteligente gerado!")
    return True

async def caso_uso_4_correcao_automatica():
    """Caso de Uso 4: Corre√ß√£o Autom√°tica de Bugs"""
    print("\nüêõ Caso de Uso 4: Corre√ß√£o Autom√°tica de Bugs")
    print("=" * 50)
    
    generator = SafeCodeGenerator()
    
    # C√≥digo com bugs comuns
    codigo_com_bugs = '''
def process_user_orders(orders):
    """Processa pedidos de usu√°rios"""
    total = 0
    processed_orders = []
    
    for order in orders:
        # Bug 1: N√£o verifica se order √© None
        if order.status == "pending":
            # Bug 2: N√£o verifica se amount existe
            total += order.amount
            
            # Bug 3: Divis√£o por zero poss√≠vel
            discount = order.amount / order.quantity * 0.1
            
            # Bug 4: N√£o trata exce√ß√£o
            processed_order = {
                "id": order.id,
                "total": order.amount - discount,
                "processed_at": datetime.now()  # Bug 5: datetime n√£o importado
            }
            processed_orders.append(processed_order)
    
    # Bug 6: Retorna apenas total, n√£o processed_orders
    return total
'''
    
    print("üìù Analisando c√≥digo com bugs...")
    
    # An√°lise do c√≥digo com bugs
    analysis = await generator.validate_existing_code(
        codigo_com_bugs,
        "C√≥digo com bugs para corre√ß√£o autom√°tica"
    )
    
    print(f"üõ°Ô∏è  Seguran√ßa: {analysis.security_score:.2f}")
    print(f"üìä Complexidade: {analysis.complexity_score:.2f}")
    print(f"‚ö†Ô∏è  Risco: {analysis.risk_assessment.value}")
    
    if analysis.warnings:
        print(f"üêõ Problemas identificados ({len(analysis.warnings)}):")
        for warning in analysis.warnings[:3]:
            print(f"   - {warning}")
    
    # Gera vers√£o corrigida
    print("\nüîß Gerando vers√£o corrigida...")
    
    correction_requirements = {
        "function_name": "process_user_orders_fixed",
        "description": "Vers√£o corrigida da fun√ß√£o de processamento de pedidos",
        "inputs": [
            {"name": "orders", "type": "List[Order]", "description": "Lista de pedidos"}
        ],
        "outputs": [
            {"name": "result", "type": "Dict", "description": "Resultado do processamento"}
        ],
        "logic_description": """
        Corrigir fun√ß√£o de processamento de pedidos:
        1. Validar entrada (orders n√£o None/vazio)
        2. Verificar atributos dos objetos antes de usar
        3. Tratar divis√£o por zero
        4. Adicionar tratamento de exce√ß√µes
        5. Importar depend√™ncias necess√°rias
        6. Retornar dados completos
        7. Adicionar logging para debug
        """,
        "safety_level": "high",
        "context": "Corre√ß√£o de bugs em sistema de e-commerce"
    }
    
    corrected_code, corr_analysis = await generator.generate_module(correction_requirements)
    
    print(f"‚úÖ C√≥digo corrigido gerado!")
    print(f"üìè Tamanho: {len(corrected_code)} caracteres")
    print(f"üõ°Ô∏è  Seguran√ßa: {corr_analysis.security_score:.2f}")
    print(f"üìä Complexidade: {corr_analysis.complexity_score:.2f}")
    
    # Mostra trecho do c√≥digo corrigido
    print(f"\nüìÑ Trecho do c√≥digo corrigido:")
    print("-" * 50)
    lines = corrected_code.split('\n')
    for i, line in enumerate(lines[:8]):
        print(f"{i+1:2d}: {line}")
    if len(lines) > 8:
        print(f"... (+{len(lines)-8} linhas)")
    print("-" * 50)
    
    return True

async def main():
    """Fun√ß√£o principal dos casos de uso"""
    
    print("\nüéØ Executando Casos de Uso Espec√≠ficos...")
    
    casos_uso = [
        ("API para Microservi√ßo", caso_uso_1_api_microservico),
        ("Otimiza√ß√£o de Algoritmo ML", caso_uso_2_otimizacao_algoritmo),
        ("Sistema de Monitoramento", caso_uso_3_sistema_monitoramento),
        ("Corre√ß√£o Autom√°tica de Bugs", caso_uso_4_correcao_automatica)
    ]
    
    results = []
    
    try:
        for nome, caso_uso_func in casos_uso:
            print(f"\n{'='*60}")
            result = await caso_uso_func()
            results.append((nome, result))
            print(f"{'='*60}")
        
        # Resumo final
        print("\nüéØ Resumo dos Casos de Uso:")
        print("=" * 60)
        
        passed = 0
        for nome, result in results:
            status = "‚úÖ SUCESSO" if result else "‚ùå FALHA"
            print(f"{nome}: {status}")
            if result:
                passed += 1
        
        success_rate = passed / len(results) * 100
        print(f"\nüìä Taxa de Sucesso: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("üéâ TODOS OS CASOS DE USO IMPLEMENTADOS COM SUCESSO!")
            print("üöÄ Sistema AutoCura pronto para produ√ß√£o!")
        elif success_rate >= 75:
            print("‚úÖ Maioria dos casos de uso funcionais")
            print("üîß Sistema pronto para uso em cen√°rios espec√≠ficos")
        else:
            print("‚ö†Ô∏è  Alguns casos de uso precisam de ajustes")
        
        print(f"\nüèÜ Aplica√ß√µes Demonstradas:")
        print(f"   üîß Gera√ß√£o autom√°tica de APIs")
        print(f"   üß† Otimiza√ß√£o de algoritmos ML")
        print(f"   üìä Sistemas de monitoramento inteligentes")
        print(f"   üêõ Corre√ß√£o autom√°tica de bugs")
        
        print(f"\nüí° Pr√≥ximos Passos Sugeridos:")
        print(f"   üìà Implementar em ambiente de produ√ß√£o")
        print(f"   üîÑ Configurar CI/CD com auto-modifica√ß√£o")
        print(f"   üìä Monitorar m√©tricas de evolu√ß√£o")
        print(f"   üéØ Expandir para casos de uso espec√≠ficos do neg√≥cio")
        
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico nos casos de uso: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Executa casos de uso
    asyncio.run(main()) 