<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="4" time="3.761" timestamp="2025-05-21T13:58:50.571705-03:00" hostname="OA1"><testcase classname="tests.unit.core.test_diagnostico_autocura" name="test_criar_diagnostico" time="0.007" /><testcase classname="tests.unit.core.test_diagnostico_autocura" name="test_analisar_diagnostico" time="0.004"><failure message="TypeError: object MagicMock can't be used in 'await' expression">gerenciador = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF86F8A50&gt;
diagnostico_exemplo = {'descricao': 'Falha no sistema de autocura', 'metricas': {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}, 'severidade': &lt;Severidade.ALTA: 'alta'&gt;, 'tipo': &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;}

    @pytest.mark.asyncio
    async def test_analisar_diagnostico(gerenciador, diagnostico_exemplo):
        """Testa a análise de um diagnóstico."""
        # Mock do método de memória
        gerenciador.memoria.atualizar_entidade = AsyncMock()
    
        # Cria e analisa diagnóstico
&gt;       diagnostico = await gerenciador.criar_diagnostico(
            tipo=diagnostico_exemplo["tipo"],
            descricao=diagnostico_exemplo["descricao"],
            severidade=diagnostico_exemplo["severidade"],
            metricas=diagnostico_exemplo["metricas"]
        )

tests\unit\core\test_diagnostico_autocura.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF86F8A50&gt;
tipo = &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;
descricao = 'Falha no sistema de autocura'
severidade = &lt;Severidade.ALTA: 'alta'&gt;
metricas = {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}

    async def criar_diagnostico(
        self,
        tipo: TipoDiagnostico,
        descricao: str,
        severidade: Severidade,
        metricas: Dict[str, Any]
    ) -&gt; Optional[DiagnosticoAutocura]:
        """Cria um novo diagnóstico"""
        if not tipo or not descricao:
            return None
    
        diagnostico = DiagnosticoAutocura(
            tipo=tipo,
            descricao=descricao,
            severidade=severidade,
            metricas=metricas
        )
    
&gt;       await self.memoria.criar_entidade("diagnosticos", diagnostico.__dict__)
E       TypeError: object MagicMock can't be used in 'await' expression

src\core\diagnostico_autocura.py:92: TypeError</failure></testcase><testcase classname="tests.unit.core.test_diagnostico_autocura" name="test_finalizar_diagnostico" time="0.003"><failure message="TypeError: object MagicMock can't be used in 'await' expression">gerenciador = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF86F87D0&gt;
diagnostico_exemplo = {'descricao': 'Falha no sistema de autocura', 'metricas': {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}, 'severidade': &lt;Severidade.ALTA: 'alta'&gt;, 'tipo': &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;}

    @pytest.mark.asyncio
    async def test_finalizar_diagnostico(gerenciador, diagnostico_exemplo):
        """Testa a finalização de um diagnóstico."""
        # Mock do método de memória
        gerenciador.memoria.atualizar_entidade = AsyncMock()
    
        # Cria, analisa e finaliza diagnóstico
&gt;       diagnostico = await gerenciador.criar_diagnostico(
            tipo=diagnostico_exemplo["tipo"],
            descricao=diagnostico_exemplo["descricao"],
            severidade=diagnostico_exemplo["severidade"],
            metricas=diagnostico_exemplo["metricas"]
        )

tests\unit\core\test_diagnostico_autocura.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF86F87D0&gt;
tipo = &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;
descricao = 'Falha no sistema de autocura'
severidade = &lt;Severidade.ALTA: 'alta'&gt;
metricas = {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}

    async def criar_diagnostico(
        self,
        tipo: TipoDiagnostico,
        descricao: str,
        severidade: Severidade,
        metricas: Dict[str, Any]
    ) -&gt; Optional[DiagnosticoAutocura]:
        """Cria um novo diagnóstico"""
        if not tipo or not descricao:
            return None
    
        diagnostico = DiagnosticoAutocura(
            tipo=tipo,
            descricao=descricao,
            severidade=severidade,
            metricas=metricas
        )
    
&gt;       await self.memoria.criar_entidade("diagnosticos", diagnostico.__dict__)
E       TypeError: object MagicMock can't be used in 'await' expression

src\core\diagnostico_autocura.py:92: TypeError</failure></testcase><testcase classname="tests.unit.core.test_diagnostico_autocura" name="test_obter_diagnostico" time="0.003"><failure message="TypeError: object MagicMock can't be used in 'await' expression">gerenciador = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF8740FC0&gt;
diagnostico_exemplo = {'descricao': 'Falha no sistema de autocura', 'metricas': {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}, 'severidade': &lt;Severidade.ALTA: 'alta'&gt;, 'tipo': &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;}

    @pytest.mark.asyncio
    async def test_obter_diagnostico(gerenciador, diagnostico_exemplo):
        """Testa a obtenção de um diagnóstico."""
        # Mock do método de memória
        gerenciador.memoria.obter_entidade = AsyncMock()
    
        # Cria diagnóstico
&gt;       diagnostico = await gerenciador.criar_diagnostico(
            tipo=diagnostico_exemplo["tipo"],
            descricao=diagnostico_exemplo["descricao"],
            severidade=diagnostico_exemplo["severidade"],
            metricas=diagnostico_exemplo["metricas"]
        )

tests\unit\core\test_diagnostico_autocura.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.core.diagnostico_autocura.GerenciadorDiagnostico object at 0x000001DCF8740FC0&gt;
tipo = &lt;TipoDiagnostico.SISTEMA: 'sistema'&gt;
descricao = 'Falha no sistema de autocura'
severidade = &lt;Severidade.ALTA: 'alta'&gt;
metricas = {'cpu': 95.0, 'latencia': 500, 'memoria': 85.0}

    async def criar_diagnostico(
        self,
        tipo: TipoDiagnostico,
        descricao: str,
        severidade: Severidade,
        metricas: Dict[str, Any]
    ) -&gt; Optional[DiagnosticoAutocura]:
        """Cria um novo diagnóstico"""
        if not tipo or not descricao:
            return None
    
        diagnostico = DiagnosticoAutocura(
            tipo=tipo,
            descricao=descricao,
            severidade=severidade,
            metricas=metricas
        )
    
&gt;       await self.memoria.criar_entidade("diagnosticos", diagnostico.__dict__)
E       TypeError: object MagicMock can't be used in 'await' expression

src\core\diagnostico_autocura.py:92: TypeError</failure></testcase></testsuite></testsuites>