<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="3" time="26.953" timestamp="2025-05-21T12:48:07.166083" hostname="OA1"><testcase classname="tests.unit.test_validacao_etica" name="test_obter_historico_etico" time="4.166"><failure message="assert == failed. [pytest-clarity diff shown]&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32m78#x1B[0m&#10;  #x1B[0m#x1B[31m1#x1B[0m&#10;  #x1B[0m">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x000002938922F890&gt;

    @pytest.mark.asyncio
    async def test_obter_historico_etico(gerenciador_memoria):
        """Testa a obtenção do histórico ético."""
        # Registra algumas validações e violações
        validacao = {
            "tipo": "decisao",
            "contexto": "teste",
            "resultado": "aprovado",
            "justificativa": "Teste de validação"
        }
        gerenciador_memoria.registrar_validacao_etica(validacao)
    
        violacao = {
            "tipo": "decisao",
            "contexto": "teste",
            "principio_violado": "privacidade",
            "descricao": "Teste de violação"
        }
        gerenciador_memoria.registrar_violacao_etica(violacao)
    
        historico = gerenciador_memoria.obter_historico_etico()
&gt;       assert len(historico["validacoes"]) == 1
E       assert == failed. [pytest-clarity diff shown]
E         #x1B[0m
E         #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below
E         #x1B[0m
E         #x1B[0m#x1B[32m78#x1B[0m
E         #x1B[0m#x1B[31m1#x1B[0m
E         #x1B[0m

tests\unit\test_validacao_etica.py:119: AssertionError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_analise_tendencia_etica" time="4.127"><failure message="KeyError: 'taxa_violacao'">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000293893F34D0&gt;

    @pytest.mark.asyncio
    async def test_analise_tendencia_etica(gerenciador_memoria):
        """Testa a análise de tendência ética."""
        # Registra várias validações e violações
        for _ in range(5):
            validacao = {
                "tipo": "decisao",
                "contexto": "teste",
                "resultado": "aprovado",
                "justificativa": "Teste de validação"
            }
            gerenciador_memoria.registrar_validacao_etica(validacao)
    
        for _ in range(2):
            violacao = {
                "tipo": "decisao",
                "contexto": "teste",
                "principio_violado": "privacidade",
                "descricao": "Teste de violação"
            }
            gerenciador_memoria.registrar_violacao_etica(violacao)
    
        tendencia = gerenciador_memoria.analisar_tendencia_etica()
        assert tendencia["taxa_aprovacao"] == 1.0
&gt;       assert tendencia["taxa_violacao"] == 0.4
E       KeyError: 'taxa_violacao'

tests\unit\test_validacao_etica.py:146: KeyError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_registrar_validacao_etica" time="4.102"><failure message="assert == failed. [pytest-clarity diff shown]&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32m10#x1B[0m&#10;  #x1B[0m#x1B[31m1#x1B[0m&#10;  #x1B[0m">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x0000029389417360&gt;

    @pytest.mark.asyncio
    async def test_registrar_validacao_etica(gerenciador_memoria):
        """Testa o registro de uma validação ética."""
        validacao = {
            "tipo": "decisao",
            "contexto": "teste",
            "resultado": "aprovado",
            "justificativa": "Teste de validação",
            "nivel_confianca": 0.95
        }
    
        gerenciador_memoria.registrar_validacao_etica(validacao)
    
        validacoes = gerenciador_memoria.obter_validacoes_eticas()
&gt;       assert len(validacoes) == 1
E       assert == failed. [pytest-clarity diff shown]
E         #x1B[0m
E         #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below
E         #x1B[0m
E         #x1B[0m#x1B[32m10#x1B[0m
E         #x1B[0m#x1B[31m1#x1B[0m
E         #x1B[0m

tests\unit\test_validacao_etica.py:43: AssertionError</failure></testcase></testsuite></testsuites>