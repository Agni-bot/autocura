<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="9" time="8.137" timestamp="2025-05-21T18:13:27.695017" hostname="OA1"><testcase classname="tests.test_monitoramento_critico" name="test_coleta_metricas_basicas" time="0.007" /><testcase classname="tests.test_monitoramento_critico" name="test_verificacao_limites_cpu" time="0.003" /><testcase classname="tests.test_monitoramento_critico" name="test_verificacao_limites_memoria" time="0.003" /><testcase classname="tests.test_monitoramento_critico" name="test_ajuste_automatico_cpu" time="0.004"><failure message="TypeError: '&gt;' not supported between instances of 'Counter' and 'int'">monitor_recursos = &lt;src.monitoramento.recursos.MonitorRecursos object at 0x000002EA7F196EA0&gt;
mock_psutil = {'cpu': &lt;MagicMock name='cpu_percent' id='3206178162736'&gt;, 'disk': &lt;MagicMock name='disk_usage' id='3206178163072'&gt;, '...agicMock name='virtual_memory' id='3206178170464'&gt;, 'process': &lt;MagicMock name='process_iter' id='3206178163744'&gt;, ...}

    @pytest.mark.asyncio
    async def test_ajuste_automatico_cpu(monitor_recursos, mock_psutil):
        """Testa o ajuste automático de CPU."""
        # Simula uso alto de CPU
        mock_psutil['cpu'].return_value = [90.0, 95.0]
    
        metricas = monitor_recursos.coletar_metricas()
        await monitor_recursos.ajustar_recursos(metricas)
    
        # Verifica se o contador de ajustes foi incrementado
&gt;       assert monitor_recursos.ajustes_counter._metrics[('cpu',)] &gt; 0
E       TypeError: '&gt;' not supported between instances of 'Counter' and 'int'

tests\test_monitoramento_critico.py:122: TypeError</failure></testcase><testcase classname="tests.test_monitoramento_critico" name="test_ajuste_automatico_memoria" time="0.006"><failure message="KeyError: 'percentual_ajuste'">monitor_recursos = &lt;src.monitoramento.recursos.MonitorRecursos object at 0x000002EA7F1955B0&gt;
mock_psutil = {'cpu': &lt;MagicMock name='cpu_percent' id='3206178949840'&gt;, 'disk': &lt;MagicMock name='disk_usage' id='3206178950512'&gt;, '...agicMock name='virtual_memory' id='3206178950176'&gt;, 'process': &lt;MagicMock name='process_iter' id='3206178951184'&gt;, ...}

    @pytest.mark.asyncio
    async def test_ajuste_automatico_memoria(monitor_recursos, mock_psutil):
        """Testa o ajuste automático de memória."""
        # Simula uso alto de memória
        mock_psutil['mem'].return_value = MagicMock(
            total=1024*1024*1024,
            available=100*1024*1024,
            percent=90.0
        )
    
        # Mock do processo com memory_percent
        mock_process = MagicMock()
        mock_process.info = {'pid': 1234, 'name': 'test', 'memory_percent': 5.0}
        mock_psutil['process'].return_value = [mock_process]
    
        metricas = monitor_recursos.coletar_metricas()
&gt;       await monitor_recursos.ajustar_recursos(metricas)

tests\test_monitoramento_critico.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.monitoramento.recursos.MonitorRecursos object at 0x000002EA7F1955B0&gt;
metricas = {'cpu': {'frequencia': 2100.0, 'por_core': [50.0, 60.0], 'total': 55.0}, 'disco': {'livre': 536870912, 'percentual': 5..., 'percentual': 90.0, 'swap': {'percentual': 25.0, 'total': 1073741824, 'usado': 268435456}, 'total': 1073741824}, ...}

    async def ajustar_recursos(self, metricas: Dict[str, Any]) -&gt; None:
        """Ajusta recursos automaticamente baseado nas métricas"""
        with self.ajuste_duration.time():
            logging.info("Iniciando ajuste de recursos")
    
            # Ajusta CPU se necessário
            if metricas['cpu']['total'] &gt; CONFIG['limites']['cpu']['total']:
                await self.ajustar_cpu(metricas['cpu'])
                self.ajustes_counter.labels(tipo='cpu').inc()
    
            # Ajusta memória se necessário
            if metricas['memoria']['percentual'] &gt; CONFIG['limites']['memoria']['percentual']:
&gt;               await self.ajustar_memoria(metricas['memoria'])

src\monitoramento\recursos.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.monitoramento.recursos.MonitorRecursos object at 0x000002EA7F1955B0&gt;
metricas_memoria = {'disponivel': 104857600, 'percentual': 90.0, 'swap': {'percentual': 25.0, 'total': 1073741824, 'usado': 268435456}, 'total': 1073741824}

    async def ajustar_memoria(self, metricas_memoria: Dict[str, Any]):
        """Ajusta recursos de memória"""
        # Implementação real: libera cache e ajusta swap
        if metricas_memoria['swap']['percentual'] &lt; CONFIG['ajuste']['memoria']['swap_limite']:
            # Aumenta uso de swap
            processos = psutil.process_iter(['pid', 'name', 'memory_percent'])
            for proc in processos:
                try:
&gt;                   if proc.info['memory_percent'] &gt; CONFIG['ajuste']['memoria']['percentual_ajuste']:
E                   KeyError: 'percentual_ajuste'

src\monitoramento\recursos.py:327: KeyError</failure></testcase><testcase classname="tests.test_monitoramento_critico" name="test_atualizacao_memoria_compartilhada" time="1.292" /><testcase classname="tests.test_monitoramento_critico" name="test_calculo_equidade" time="0.003" /><testcase classname="tests.test_monitoramento_critico" name="test_ajuste_equidade" time="0.005" /><testcase classname="tests.test_monitoramento_critico" name="test_encerramento_gracioso" time="3.104" /></testsuite></testsuites>