{"content": {"suites": {"0": {"status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_atualizar_configuracao_inexistente", "rerun": "0"}, "1": {"status": "ERROR", "message": "config = {'base_dir': 'test_config'}\n\n    @pytest.fixture\n    def gerenciador(config):\n        \"\"\"Inst\u00e2ncia do gerenciador de configura\u00e7\u00e3o.\"\"\"\n>       return GerenciadorConfig(config)\n\ntests\\test_gerenciador_config.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.config.gerenciador_config.GerenciadorConfig object at 0x0000017A1FE68690>\nconfig = {'base_dir': 'test_config'}\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Inicializa o gerenciador de configura\u00e7\u00e3o.\n    \n        Args:\n            config: Configura\u00e7\u00e3o do gerenciador\n        \"\"\"\n        self.config = config\n        self.logger = logging.getLogger(__name__)\n    \n        # Diret\u00f3rio base para arquivos de configura\u00e7\u00e3o\n        self.base_dir = Path(config.get(\"base_dir\", \"config\"))\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Cache de configura\u00e7\u00f5es\n        self.configuracoes: Dict[str, Configuracao] = {}\n    \n        # Hist\u00f3rico de vers\u00f5es\n        self.historico: Dict[str, List[Configuracao]] = {}\n    \n        # M\u00e9tricas Prometheus\n        self.metricas = {\n>           \"configuracoes_criadas\": Counter(\n                \"configuracoes_criadas\",\n                \"Total de configura\u00e7\u00f5es criadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_atualizadas\": Counter(\n                \"configuracoes_atualizadas\",\n                \"Total de configura\u00e7\u00f5es atualizadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_carregadas\": Counter(\n                \"configuracoes_carregadas\",\n                \"Total de configura\u00e7\u00f5es carregadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"tempo_operacao\": Histogram(\n                \"tempo_operacao_config\",\n                \"Tempo de opera\u00e7\u00f5es na configura\u00e7\u00e3o\",\n                [\"operacao\"]\n            )\n        }\n\nsrc\\config\\gerenciador_config.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = prometheus_client.metrics.Counter(configuracoes_criadas), name = 'configuracoes_criadas'\ndocumentation = 'Total de configura\u00e7\u00f5es criadas', labelnames = ['tipo', 'ambiente']\nnamespace = '', subsystem = '', unit = ''\nregistry = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\n_labelvalues = None\n\n    def __init__(self: T,\n                 name: str,\n                 documentation: str,\n                 labelnames: Iterable[str] = (),\n                 namespace: str = '',\n                 subsystem: str = '',\n                 unit: str = '',\n                 registry: Optional[CollectorRegistry] = REGISTRY,\n                 _labelvalues: Optional[Sequence[str]] = None,\n                 ) -> None:\n        self._name = _build_full_name(self._type, name, namespace, subsystem, unit)\n        self._labelnames = _validate_labelnames(self, labelnames)\n        self._labelvalues = tuple(_labelvalues or ())\n        self._kwargs: Dict[str, Any] = {}\n        self._documentation = documentation\n        self._unit = unit\n    \n        if not METRIC_NAME_RE.match(self._name):\n            raise ValueError('Invalid metric name: ' + self._name)\n    \n        if self._is_parent():\n            # Prepare the fields needed for child metrics.\n            self._lock = Lock()\n            self._metrics: Dict[Sequence[str], T] = {}\n    \n        if self._is_observable():\n            self._metric_init()\n    \n        if not self._labelvalues:\n            # Register the multi-wrapper parent metric, or if a label-less metric, the whole shebang.\n            if registry:\n>               registry.register(self)\n\nvenv\\Lib\\site-packages\\prometheus_client\\metrics.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\ncollector = prometheus_client.metrics.Counter(configuracoes_criadas)\n\n    def register(self, collector: Collector) -> None:\n        \"\"\"Add a collector to the registry.\"\"\"\n        with self._lock:\n            names = self._get_names(collector)\n            duplicates = set(self._names_to_collectors).intersection(names)\n            if duplicates:\n>               raise ValueError(\n                    'Duplicated timeseries in CollectorRegistry: {}'.format(\n                        duplicates))\nE               ValueError: Duplicated timeseries in CollectorRegistry: {'configuracoes_criadas', 'configuracoes_criadas_created', 'configuracoes_criadas_total'}\n\nvenv\\Lib\\site-packages\\prometheus_client\\registry.py:43: ValueError\n", "test_name": "test_atualizar_configuracao", "rerun": "0"}, "2": {"status": "ERROR", "message": "config = {'base_dir': 'test_config'}\n\n    @pytest.fixture\n    def gerenciador(config):\n        \"\"\"Inst\u00e2ncia do gerenciador de configura\u00e7\u00e3o.\"\"\"\n>       return GerenciadorConfig(config)\n\ntests\\test_gerenciador_config.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.config.gerenciador_config.GerenciadorConfig object at 0x0000017A1FE6B610>\nconfig = {'base_dir': 'test_config'}\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Inicializa o gerenciador de configura\u00e7\u00e3o.\n    \n        Args:\n            config: Configura\u00e7\u00e3o do gerenciador\n        \"\"\"\n        self.config = config\n        self.logger = logging.getLogger(__name__)\n    \n        # Diret\u00f3rio base para arquivos de configura\u00e7\u00e3o\n        self.base_dir = Path(config.get(\"base_dir\", \"config\"))\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Cache de configura\u00e7\u00f5es\n        self.configuracoes: Dict[str, Configuracao] = {}\n    \n        # Hist\u00f3rico de vers\u00f5es\n        self.historico: Dict[str, List[Configuracao]] = {}\n    \n        # M\u00e9tricas Prometheus\n        self.metricas = {\n>           \"configuracoes_criadas\": Counter(\n                \"configuracoes_criadas\",\n                \"Total de configura\u00e7\u00f5es criadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_atualizadas\": Counter(\n                \"configuracoes_atualizadas\",\n                \"Total de configura\u00e7\u00f5es atualizadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_carregadas\": Counter(\n                \"configuracoes_carregadas\",\n                \"Total de configura\u00e7\u00f5es carregadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"tempo_operacao\": Histogram(\n                \"tempo_operacao_config\",\n                \"Tempo de opera\u00e7\u00f5es na configura\u00e7\u00e3o\",\n                [\"operacao\"]\n            )\n        }\n\nsrc\\config\\gerenciador_config.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = prometheus_client.metrics.Counter(configuracoes_criadas), name = 'configuracoes_criadas'\ndocumentation = 'Total de configura\u00e7\u00f5es criadas', labelnames = ['tipo', 'ambiente']\nnamespace = '', subsystem = '', unit = ''\nregistry = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\n_labelvalues = None\n\n    def __init__(self: T,\n                 name: str,\n                 documentation: str,\n                 labelnames: Iterable[str] = (),\n                 namespace: str = '',\n                 subsystem: str = '',\n                 unit: str = '',\n                 registry: Optional[CollectorRegistry] = REGISTRY,\n                 _labelvalues: Optional[Sequence[str]] = None,\n                 ) -> None:\n        self._name = _build_full_name(self._type, name, namespace, subsystem, unit)\n        self._labelnames = _validate_labelnames(self, labelnames)\n        self._labelvalues = tuple(_labelvalues or ())\n        self._kwargs: Dict[str, Any] = {}\n        self._documentation = documentation\n        self._unit = unit\n    \n        if not METRIC_NAME_RE.match(self._name):\n            raise ValueError('Invalid metric name: ' + self._name)\n    \n        if self._is_parent():\n            # Prepare the fields needed for child metrics.\n            self._lock = Lock()\n            self._metrics: Dict[Sequence[str], T] = {}\n    \n        if self._is_observable():\n            self._metric_init()\n    \n        if not self._labelvalues:\n            # Register the multi-wrapper parent metric, or if a label-less metric, the whole shebang.\n            if registry:\n>               registry.register(self)\n\nvenv\\Lib\\site-packages\\prometheus_client\\metrics.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\ncollector = prometheus_client.metrics.Counter(configuracoes_criadas)\n\n    def register(self, collector: Collector) -> None:\n        \"\"\"Add a collector to the registry.\"\"\"\n        with self._lock:\n            names = self._get_names(collector)\n            duplicates = set(self._names_to_collectors).intersection(names)\n            if duplicates:\n>               raise ValueError(\n                    'Duplicated timeseries in CollectorRegistry: {}'.format(\n                        duplicates))\nE               ValueError: Duplicated timeseries in CollectorRegistry: {'configuracoes_criadas', 'configuracoes_criadas_created', 'configuracoes_criadas_total'}\n\nvenv\\Lib\\site-packages\\prometheus_client\\registry.py:43: ValueError\n", "test_name": "test_inicializacao", "rerun": "0"}, "3": {"status": "ERROR", "message": "config = {'base_dir': 'test_config'}\n\n    @pytest.fixture\n    def gerenciador(config):\n        \"\"\"Inst\u00e2ncia do gerenciador de configura\u00e7\u00e3o.\"\"\"\n>       return GerenciadorConfig(config)\n\ntests\\test_gerenciador_config.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.config.gerenciador_config.GerenciadorConfig object at 0x0000017A1FEB1220>\nconfig = {'base_dir': 'test_config'}\n\n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Inicializa o gerenciador de configura\u00e7\u00e3o.\n    \n        Args:\n            config: Configura\u00e7\u00e3o do gerenciador\n        \"\"\"\n        self.config = config\n        self.logger = logging.getLogger(__name__)\n    \n        # Diret\u00f3rio base para arquivos de configura\u00e7\u00e3o\n        self.base_dir = Path(config.get(\"base_dir\", \"config\"))\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Cache de configura\u00e7\u00f5es\n        self.configuracoes: Dict[str, Configuracao] = {}\n    \n        # Hist\u00f3rico de vers\u00f5es\n        self.historico: Dict[str, List[Configuracao]] = {}\n    \n        # M\u00e9tricas Prometheus\n        self.metricas = {\n>           \"configuracoes_criadas\": Counter(\n                \"configuracoes_criadas\",\n                \"Total de configura\u00e7\u00f5es criadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_atualizadas\": Counter(\n                \"configuracoes_atualizadas\",\n                \"Total de configura\u00e7\u00f5es atualizadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"configuracoes_carregadas\": Counter(\n                \"configuracoes_carregadas\",\n                \"Total de configura\u00e7\u00f5es carregadas\",\n                [\"tipo\", \"ambiente\"]\n            ),\n            \"tempo_operacao\": Histogram(\n                \"tempo_operacao_config\",\n                \"Tempo de opera\u00e7\u00f5es na configura\u00e7\u00e3o\",\n                [\"operacao\"]\n            )\n        }\n\nsrc\\config\\gerenciador_config.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = prometheus_client.metrics.Counter(configuracoes_criadas), name = 'configuracoes_criadas'\ndocumentation = 'Total de configura\u00e7\u00f5es criadas', labelnames = ['tipo', 'ambiente']\nnamespace = '', subsystem = '', unit = ''\nregistry = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\n_labelvalues = None\n\n    def __init__(self: T,\n                 name: str,\n                 documentation: str,\n                 labelnames: Iterable[str] = (),\n                 namespace: str = '',\n                 subsystem: str = '',\n                 unit: str = '',\n                 registry: Optional[CollectorRegistry] = REGISTRY,\n                 _labelvalues: Optional[Sequence[str]] = None,\n                 ) -> None:\n        self._name = _build_full_name(self._type, name, namespace, subsystem, unit)\n        self._labelnames = _validate_labelnames(self, labelnames)\n        self._labelvalues = tuple(_labelvalues or ())\n        self._kwargs: Dict[str, Any] = {}\n        self._documentation = documentation\n        self._unit = unit\n    \n        if not METRIC_NAME_RE.match(self._name):\n            raise ValueError('Invalid metric name: ' + self._name)\n    \n        if self._is_parent():\n            # Prepare the fields needed for child metrics.\n            self._lock = Lock()\n            self._metrics: Dict[Sequence[str], T] = {}\n    \n        if self._is_observable():\n            self._metric_init()\n    \n        if not self._labelvalues:\n            # Register the multi-wrapper parent metric, or if a label-less metric, the whole shebang.\n            if registry:\n>               registry.register(self)\n\nvenv\\Lib\\site-packages\\prometheus_client\\metrics.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <prometheus_client.registry.CollectorRegistry object at 0x0000017A594E4050>\ncollector = prometheus_client.metrics.Counter(configuracoes_criadas)\n\n    def register(self, collector: Collector) -> None:\n        \"\"\"Add a collector to the registry.\"\"\"\n        with self._lock:\n            names = self._get_names(collector)\n            duplicates = set(self._names_to_collectors).intersection(names)\n            if duplicates:\n>               raise ValueError(\n                    'Duplicated timeseries in CollectorRegistry: {}'.format(\n                        duplicates))\nE               ValueError: Duplicated timeseries in CollectorRegistry: {'configuracoes_criadas', 'configuracoes_criadas_created', 'configuracoes_criadas_total'}\n\nvenv\\Lib\\site-packages\\prometheus_client\\registry.py:43: ValueError\n", "test_name": "test_obter_historico", "rerun": "0"}}, "suite_name": "tests/test_gerenciador_config.py"}}}, "date": "May 21, 2025", "start_time": 1747842463.33595, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "1", "fail": "0", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}