# Script de Inicializa√ß√£o - Sistema AutoCura Omega
# Inicia todos os servi√ßos em ordem correta

Write-Host "üöÄ Iniciando Sistema AutoCura - Fase Omega" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Verificar se .env existe
if (-not (Test-Path ".env")) {
    Write-Host "‚ùå Arquivo .env n√£o encontrado!" -ForegroundColor Red
    Write-Host "Execute primeiro: .\setup_security.ps1" -ForegroundColor Yellow
    exit 1
}

# Verificar se Docker est√° rodando
try {
    docker version | Out-Null
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando!" -ForegroundColor Red
    Write-Host "Por favor, inicie o Docker Desktop" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
Write-Host ""

# Parar containers antigos se existirem
Write-Host "üõë Parando containers antigos..." -ForegroundColor Yellow
docker-compose -f docker-compose.omega.yml down 2>$null

Write-Host ""
Write-Host "üèóÔ∏è Construindo imagens (pode levar alguns minutos)..." -ForegroundColor Yellow
$buildResult = docker-compose -f docker-compose.omega.yml build 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao construir imagens!" -ForegroundColor Red
    Write-Host $buildResult -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Imagens constru√≠das com sucesso!" -ForegroundColor Green
Write-Host ""

# Iniciar servi√ßos base primeiro (banco de dados e cache)
Write-Host "üóÑÔ∏è Iniciando servi√ßos de dados..." -ForegroundColor Yellow
docker-compose -f docker-compose.omega.yml up -d postgres redis

# Aguardar servi√ßos estarem prontos
Write-Host "‚è≥ Aguardando banco de dados..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Verificar se PostgreSQL est√° pronto
$pgReady = $false
$attempts = 0
while (-not $pgReady -and $attempts -lt 30) {
    $pgCheck = docker exec autocura-postgres pg_isready -U autocura 2>&1
    if ($LASTEXITCODE -eq 0) {
        $pgReady = $true
        Write-Host "‚úÖ PostgreSQL est√° pronto!" -ForegroundColor Green
    } else {
        Write-Host "." -NoNewline
        Start-Sleep -Seconds 2
        $attempts++
    }
}

if (-not $pgReady) {
    Write-Host ""
    Write-Host "‚ùå PostgreSQL n√£o iniciou corretamente!" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üß† Iniciando n√∫cleo cognitivo e servi√ßos..." -ForegroundColor Yellow
docker-compose -f docker-compose.omega.yml up -d

Write-Host ""
Write-Host "‚è≥ Aguardando todos os servi√ßos iniciarem..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

# Verificar status
Write-Host ""
Write-Host "üìä Status dos containers:" -ForegroundColor Yellow
docker-compose -f docker-compose.omega.yml ps

Write-Host ""
Write-Host "üîç Verificando sa√∫de do sistema..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Executar verifica√ß√£o de sa√∫de
if (Test-Path ".\health_check.ps1") {
    Write-Host ""
    & .\health_check.ps1
} else {
    Write-Host "‚ö†Ô∏è Script de verifica√ß√£o de sa√∫de n√£o encontrado" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host "üéâ Sistema AutoCura iniciado!" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host ""
Write-Host "üì° Acesse os servi√ßos:" -ForegroundColor Cyan
Write-Host "  - API REST: http://localhost:8000/docs" -ForegroundColor White
Write-Host "  - Grafana: http://localhost:3000 (admin/senha do .env)" -ForegroundColor White
Write-Host "  - Prometheus: http://localhost:9090" -ForegroundColor White
Write-Host ""
Write-Host "üìã Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "  - Ver logs: docker-compose -f docker-compose.omega.yml logs -f" -ForegroundColor White
Write-Host "  - Parar sistema: docker-compose -f docker-compose.omega.yml down" -ForegroundColor White
Write-Host "  - Ver status: docker-compose -f docker-compose.omega.yml ps" -ForegroundColor White
Write-Host "" 