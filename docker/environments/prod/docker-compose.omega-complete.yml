version: '3.8'

services:
  # 1. Banco de Dados
  postgres:
    image: postgres:15-alpine
    container_name: autocura-postgres
    environment:
      POSTGRES_DB: autocura
      POSTGRES_USER: autocura
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - autocura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autocura"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Cache
  redis:
    image: redis:7-alpine
    container_name: autocura-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - autocura-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 3. API Principal
  api:
    build:
      context: ../../..
      dockerfile: docker/environments/prod/Dockerfile.omega
    container_name: autocura-api
    environment:
      - DATABASE_URL=postgresql://autocura:${DB_PASSWORD}@postgres:5432/autocura
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - MODULE_TYPE=api
    volumes:
      - ../../../:/app
      - api_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autocura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 4. Omega Core
  omega-core:
    build:
      context: ../../..
      dockerfile: docker/environments/prod/Dockerfile.omega
    container_name: autocura-omega-core
    command: python -m modulos.omega.src.main
    environment:
      - DATABASE_URL=postgresql://autocura:${DB_PASSWORD}@postgres:5432/autocura
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODULE_TYPE=omega-core
      - CONSCIOUSNESS_LEVEL=TRANSCENDENT
    volumes:
      - ../../../:/app
      - omega_data:/app/data
      - omega_models:/app/models
    networks:
      - autocura-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:9001/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 5. Monitor de Consciência
  consciousness-monitor:
    build:
      context: ../../..
      dockerfile: docker/environments/prod/Dockerfile.omega
    container_name: autocura-consciousness-monitor
    command: python -m modulos.omega.src.consciousness.monitor_service
    environment:
      - DATABASE_URL=postgresql://autocura:${DB_PASSWORD}@postgres:5432/autocura
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODULE_TYPE=consciousness-monitor
    volumes:
      - ../../../:/app
      - consciousness_data:/app/data
      - consciousness_reports:/app/reports
    networks:
      - autocura-network
    depends_on:
      - omega-core
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:9002/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 6. Motor de Evolução
  evolution-engine:
    build:
      context: ../../..
      dockerfile: docker/environments/prod/Dockerfile.omega
    container_name: autocura-evolution-engine
    command: python -m modulos.omega.src.evolution.evolution_service
    environment:
      - DATABASE_URL=postgresql://autocura:${DB_PASSWORD}@postgres:5432/autocura
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODULE_TYPE=evolution-engine
    volumes:
      - ../../../:/app
      - evolution_data:/app/data
      - evolution_checkpoints:/app/checkpoints
    networks:
      - autocura-network
    depends_on:
      - omega-core
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:9003/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 7. Orquestrador de Integração
  integration-orchestrator:
    build:
      context: ../../..
      dockerfile: docker/environments/prod/Dockerfile.omega
    container_name: autocura-integration-orchestrator
    command: python -m modulos.omega.src.integration.orchestrator_service
    environment:
      - DATABASE_URL=postgresql://autocura:${DB_PASSWORD}@postgres:5432/autocura
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODULE_TYPE=integration-orchestrator
    volumes:
      - ../../../:/app
      - integration_data:/app/data
    networks:
      - autocura-network
    depends_on:
      - omega-core
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:9004/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 8. Nginx - Load Balancer & SSL
  nginx:
    image: nginx:alpine
    container_name: autocura-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../../../dashboard.html:/usr/share/nginx/html/index.html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - grafana
      - prometheus
    networks:
      - autocura-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 9. Prometheus - Métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: autocura-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - autocura-network
    depends_on:
      - api
      - omega-core
      - consciousness-monitor
      - evolution-engine
      - integration-orchestrator
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 10. Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: autocura-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - autocura-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  autocura-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  api_logs:
  omega_data:
  omega_models:
  consciousness_data:
  consciousness_reports:
  evolution_data:
  evolution_checkpoints:
  integration_data:
  prometheus_data:
  grafana_data: 