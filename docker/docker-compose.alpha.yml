version: '3.8'

services:
  # API Principal AutoCura - Fase Alpha
  autocura-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=alpha
      - DEBUG=true
      - LOG_LEVEL=INFO
      - FASE_ATUAL=ALPHA
      - ETAPA_ATUAL=A2_CORRIGIDA
    volumes:
      - ../src:/app/src
      - ../memoria_compartilhada.json:/app/memoria_compartilhada.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Observabilidade Multi-Dimensional
  autocura-observador:
    build:
      context: ..
      dockerfile: docker/Dockerfile.observador
    environment:
      - ENVIRONMENT=alpha
      - API_URL=http://autocura-api:8000
      - COLETA_INTERVALO=30
      - CAPACIDADES=classical,quantum_ready,nano_ready,bio_ready
    volumes:
      - ../src:/app/src
      - ../data:/app/data
    networks:
      - autocura-alpha
    depends_on:
      - autocura-api
    restart: unless-stopped

  # IA Evolutiva
  autocura-ia:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ia
    environment:
      - ENVIRONMENT=alpha
      - API_URL=http://autocura-api:8000
      - NIVEL_COGNITIVO_INICIAL=REACTIVE
      - EVOLUCAO_AUTOMATICA=true
    volumes:
      - ../src:/app/src
      - ../data:/app/data
    networks:
      - autocura-alpha
    depends_on:
      - autocura-api
    restart: unless-stopped

  # Diagnóstico Multi-Paradigma
  autocura-diagnostico:
    build:
      context: ..
      dockerfile: docker/Dockerfile.diagnostico
    environment:
      - ENVIRONMENT=alpha
      - API_URL=http://autocura-api:8000
      - PARADIGMAS=statistical,logical,pattern_recognition,neural_network,fuzzy_logic,quantum_parallel,swarm_intelligence,evolutionary,hybrid
    volumes:
      - ../src:/app/src
      - ../data:/app/data
    networks:
      - autocura-alpha
    depends_on:
      - autocura-api
    restart: unless-stopped

  # Monitoramento Simplificado
  autocura-monitor:
    build:
      context: ..
      dockerfile: docker/Dockerfile.monitor
    ports:
      - "9090:9090"
    environment:
      - ENVIRONMENT=alpha
      - API_URL=http://autocura-api:8000
    volumes:
      - ../src:/app/src
      - ../config:/app/config
    networks:
      - autocura-alpha
    depends_on:
      - autocura-api
    restart: unless-stopped

  # Cache Redis (essencial)
  autocura-redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-alpha:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Dashboard de Métricas
  autocura-dashboard:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=autocura123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-alpha:/var/lib/grafana
    restart: unless-stopped

volumes:
  redis-alpha:
    driver: local
  grafana-alpha:
    driver: local

networks:
  autocura-alpha:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 