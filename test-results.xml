<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="14" time="2.674" timestamp="2025-05-20T22:24:23.899624-03:00" hostname="OA1"><testcase classname="tests.unit.test_gerenciador_memoria" name="test_inicializacao_basica" time="0.008" /><testcase classname="tests.unit.test_gerenciador_memoria" name="test_inicializacao_com_config" time="0.004"><failure message="AssertionError: assert WindowsPath('C:/Users/filip/AppData/Local/Temp/memoria_test.json') == 'C:\\Users\\filip\\AppData\\Local\\Temp\\memoria_test.json'&#10; +  where WindowsPath('C:/Users/filip/AppData/Local/Temp/memoria_test.json') = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85DA210&gt;.caminho_memoria">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85DA210&gt;
test_config = {'grafana_port': 3001, 'loki_port': 3101, 'memoria_path': 'C:\\Users\\filip\\AppData\\Local\\Temp\\memoria_test.json', 'prometheus_port': 9091, ...}

    @pytest.mark.asyncio
    async def test_inicializacao_com_config(gerenciador_memoria, test_config):
        """Testa a inicialização com configuração personalizada."""
&gt;       assert gerenciador_memoria.caminho_memoria == test_config["memoria_path"]
E       AssertionError: assert WindowsPath('C:/Users/filip/AppData/Local/Temp/memoria_test.json') == 'C:\\Users\\filip\\AppData\\Local\\Temp\\memoria_test.json'
E        +  where WindowsPath('C:/Users/filip/AppData/Local/Temp/memoria_test.json') = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85DA210&gt;.caminho_memoria

tests\unit\test_gerenciador_memoria.py:44: AssertionError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_criar_entidade" time="0.004"><failure message="assert None is not None">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85D8A50&gt;

    @pytest.mark.asyncio
    async def test_criar_entidade(gerenciador_memoria):
        """Testa a criação de uma entidade na memória."""
        dados = {"teste": "valor"}
        entidade = await gerenciador_memoria.criar_entidade("conhecimento", dados, ["teste"])
    
&gt;       assert entidade is not None
E       assert None is not None

tests\unit\test_gerenciador_memoria.py:54: AssertionError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_obter_entidade" time="0.004"><failure message="AttributeError: 'NoneType' object has no attribute 'id'">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E869C510&gt;

    @pytest.mark.asyncio
    async def test_obter_entidade(gerenciador_memoria):
        """Testa a recuperação de uma entidade da memória."""
        dados = {"teste": "valor"}
        entidade = await gerenciador_memoria.criar_entidade("conhecimento", dados, ["teste"])
    
&gt;       entidade_recuperada = await gerenciador_memoria.obter_entidade(entidade.id)
E       AttributeError: 'NoneType' object has no attribute 'id'

tests\unit\test_gerenciador_memoria.py:65: AttributeError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_atualizar_entidade" time="0.004"><failure message="AttributeError: 'NoneType' object has no attribute 'id'">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E869E650&gt;

    @pytest.mark.asyncio
    async def test_atualizar_entidade(gerenciador_memoria):
        """Testa a atualização de uma entidade na memória."""
        dados_iniciais = {"teste": "valor"}
        entidade = await gerenciador_memoria.criar_entidade("conhecimento", dados_iniciais, ["teste"])
    
        dados_atualizados = {"teste": "novo_valor"}
&gt;       sucesso = await gerenciador_memoria.atualizar_entidade(entidade.id, dados_atualizados)
E       AttributeError: 'NoneType' object has no attribute 'id'

tests\unit\test_gerenciador_memoria.py:77: AttributeError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_metricas_prometheus" time="0.004"><failure message="AssertionError: assert 0.0 == 1&#10; +  where 0.0 = get()&#10; +    where get = &lt;prometheus_client.values.MutexValue object at 0x00000263E8572660&gt;.get&#10; +      where &lt;prometheus_client.values.MutexValue object at 0x00000263E8572660&gt; = prometheus_client.metrics.Counter(entidades_memoria_criadas)._value&#10; +        where prometheus_client.metrics.Counter(entidades_memoria_criadas) = labels(tipo='conhecimento')&#10; +          where labels = prometheus_client.metrics.Counter(entidades_memoria_criadas).labels">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E8563770&gt;

    @pytest.mark.asyncio
    async def test_metricas_prometheus(gerenciador_memoria):
        """Testa se as métricas do Prometheus estão sendo registradas corretamente."""
        # Cria algumas entidades
        dados = {"teste": "valor"}
        await gerenciador_memoria.criar_entidade("conhecimento", dados, ["teste"])
        await gerenciador_memoria.criar_entidade("evento", dados, ["teste"])
    
        # Verifica se as métricas foram incrementadas
        metricas = gerenciador_memoria.metricas
&gt;       assert metricas["entidades_criadas"].labels(tipo="conhecimento")._value.get() == 1
E       AssertionError: assert 0.0 == 1
E        +  where 0.0 = get()
E        +    where get = &lt;prometheus_client.values.MutexValue object at 0x00000263E8572660&gt;.get
E        +      where &lt;prometheus_client.values.MutexValue object at 0x00000263E8572660&gt; = prometheus_client.metrics.Counter(entidades_memoria_criadas)._value
E        +        where prometheus_client.metrics.Counter(entidades_memoria_criadas) = labels(tipo='conhecimento')
E        +          where labels = prometheus_client.metrics.Counter(entidades_memoria_criadas).labels

tests\unit\test_gerenciador_memoria.py:93: AssertionError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_limpar_memoria_antiga" time="0.003"><failure message="KeyError: 'entidades'">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E86A2470&gt;

    @pytest.mark.asyncio
    async def test_limpar_memoria_antiga(gerenciador_memoria):
        """Testa a limpeza de memória antiga."""
        # Cria algumas entidades
        dados = {"teste": "valor"}
        await gerenciador_memoria.criar_entidade("conhecimento", dados, ["teste"])
    
        # Limpa memória
&gt;       gerenciador_memoria.limpar_memoria_antiga(dias=0)  # Força limpeza imediata

tests\unit\test_gerenciador_memoria.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E86A2470&gt;
dias = 0

    def limpar_memoria_antiga(self, dias: int = 30) -&gt; None:
        """Limpa registros antigos da memória"""
        data_limite = (datetime.now() - timedelta(days=dias)).isoformat()
    
        # Limpa entidades antigas
&gt;       for tipo in self.memoria["memoria_operacional"]["entidades"]:
E       KeyError: 'entidades'

src\memoria\gerenciador_memoria.py:733: KeyError</failure></testcase><testcase classname="tests.unit.test_gerenciador_memoria" name="test_obter_estatisticas" time="0.004"><failure message="AssertionError: assert 'total_entidades' in {}">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85F6F10&gt;

    @pytest.mark.asyncio
    async def test_obter_estatisticas(gerenciador_memoria):
        """Testa a obtenção de estatísticas da memória."""
        # Cria algumas entidades
        dados = {"teste": "valor"}
        await gerenciador_memoria.criar_entidade("conhecimento", dados, ["teste"])
        await gerenciador_memoria.criar_entidade("evento", dados, ["teste"])
    
        # Obtém estatísticas
        stats = await gerenciador_memoria.obter_estatisticas()
    
&gt;       assert "total_entidades" in stats
E       AssertionError: assert 'total_entidades' in {}

tests\unit\test_gerenciador_memoria.py:121: AssertionError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_registrar_validacao_etica" time="0.016" /><testcase classname="tests.unit.test_validacao_etica" name="test_validar_decisao_etica" time="0.014"><failure message="TypeError: object dict can't be used in 'await' expression">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E866AB50&gt;

    @pytest.mark.asyncio
    async def test_validar_decisao_etica(gerenciador_memoria):
        """Testa a validação ética de uma decisão."""
        # Registra princípios éticos
        principios = {
            "privacidade": 0.9,
            "transparencia": 0.85,
            "justica": 0.95
        }
        gerenciador_memoria.registrar_principios_eticos(principios)
    
        # Testa decisão que respeita os princípios
        decisao = {
            "contexto": "processamento_dados",
            "principios_afetados": ["privacidade", "transparencia"],
            "dados": {"tipo": "pessoal", "nivel_sensibilidade": "baixo"}
        }
    
&gt;       resultado = await gerenciador_memoria.validar_decisao_etica(decisao)
E       TypeError: object dict can't be used in 'await' expression

tests\unit\test_validacao_etica.py:65: TypeError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_registrar_violacao_etica" time="0.036" /><testcase classname="tests.unit.test_validacao_etica" name="test_obter_historico_etico" time="0.027"><failure message="AssertionError: assert 3 == 1&#10; +  where 3 = len([{'tipo': 'decisao', 'contexto': 'teste', 'resultado': 'aprovado', 'justificativa': 'Teste de valida\xe7\xe3o', 'nivel_confianca': 0.95, 'timestamp': '2025-05-20T22:24:24.116404'}, {'tipo': 'decisao', 'contexto': 'processamento_dados', 'resultado': 'aprovado', 'justificativa': 'Decis\xe3o validada', 'nivel_confianca': 1.0, 'timestamp': '2025-05-20T22:24:24.143113'}, {'tipo': 'decisao', 'contexto': 'teste', 'resultado': 'aprovado', 'justificativa': 'Teste de valida\xe7\xe3o', 'timestamp': '2025-05-20T22:24:24.210201'}])">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E85FC6E0&gt;

    @pytest.mark.asyncio
    async def test_obter_historico_etico(gerenciador_memoria):
        """Testa a obtenção do histórico ético."""
        # Registra algumas validações e violações
        validacao = {
            "tipo": "decisao",
            "contexto": "teste",
            "resultado": "aprovado",
            "justificativa": "Teste de validação"
        }
        gerenciador_memoria.registrar_validacao_etica(validacao)
    
        violacao = {
            "tipo": "decisao",
            "contexto": "teste",
            "principio_violado": "privacidade",
            "descricao": "Teste de violação"
        }
        gerenciador_memoria.registrar_violacao_etica(violacao)
    
        historico = gerenciador_memoria.obter_historico_etico()
&gt;       assert len(historico["validacoes"]) == 1
E       AssertionError: assert 3 == 1
E        +  where 3 = len([{'tipo': 'decisao', 'contexto': 'teste', 'resultado': 'aprovado', 'justificativa': 'Teste de valida\xe7\xe3o', 'nivel_confianca': 0.95, 'timestamp': '2025-05-20T22:24:24.116404'}, {'tipo': 'decisao', 'contexto': 'processamento_dados', 'resultado': 'aprovado', 'justificativa': 'Decis\xe3o validada', 'nivel_confianca': 1.0, 'timestamp': '2025-05-20T22:24:24.143113'}, {'tipo': 'decisao', 'contexto': 'teste', 'resultado': 'aprovado', 'justificativa': 'Teste de valida\xe7\xe3o', 'timestamp': '2025-05-20T22:24:24.210201'}])

tests\unit\test_validacao_etica.py:119: AssertionError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_analise_tendencia_etica" time="0.024"><failure message="assert 0.3333333333333333 == 0.4">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E73AACF0&gt;

    @pytest.mark.asyncio
    async def test_analise_tendencia_etica(gerenciador_memoria):
        """Testa a análise de tendência ética."""
        # Registra várias validações e violações
        for _ in range(5):
            validacao = {
                "tipo": "decisao",
                "contexto": "teste",
                "resultado": "aprovado",
                "justificativa": "Teste de validação"
            }
            gerenciador_memoria.registrar_validacao_etica(validacao)
    
        for _ in range(2):
            violacao = {
                "tipo": "decisao",
                "contexto": "teste",
                "principio_violado": "privacidade",
                "descricao": "Teste de violação"
            }
            gerenciador_memoria.registrar_violacao_etica(violacao)
    
        tendencia = gerenciador_memoria.analisar_tendencia_etica()
        assert tendencia["taxa_aprovacao"] == 1.0
&gt;       assert tendencia["taxa_violacao"] == 0.4
E       assert 0.3333333333333333 == 0.4

tests\unit\test_validacao_etica.py:146: AssertionError</failure></testcase><testcase classname="tests.unit.test_validacao_etica" name="test_validacao_etica_com_principios" time="0.016"><failure message="TypeError: object dict can't be used in 'await' expression">gerenciador_memoria = &lt;src.memoria.gerenciador_memoria.GerenciadorMemoria object at 0x00000263E863C050&gt;

    @pytest.mark.asyncio
    async def test_validacao_etica_com_principios(gerenciador_memoria):
        """Testa a validação ética considerando princípios específicos."""
        # Registra princípios éticos
        principios = {
            "privacidade": 0.9,
            "transparencia": 0.85,
            "justica": 0.95,
            "seguranca": 0.88
        }
        gerenciador_memoria.registrar_principios_eticos(principios)
    
        # Testa decisão que afeta múltiplos princípios
        decisao = {
            "contexto": "processamento_dados",
            "principios_afetados": ["privacidade", "seguranca", "transparencia"],
            "dados": {
                "tipo": "pessoal",
                "nivel_sensibilidade": "medio",
                "medidas_seguranca": ["criptografia", "auditoria"]
            }
        }
    
&gt;       resultado = await gerenciador_memoria.validar_decisao_etica(decisao)
E       TypeError: object dict can't be used in 'await' expression

tests\unit\test_validacao_etica.py:173: TypeError</failure></testcase></testsuite></testsuites>