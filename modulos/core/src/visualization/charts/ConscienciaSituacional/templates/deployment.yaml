# charts/ConscienciaSituacional/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-consciencia-situacional
  labels:
    app: consciencia-situacional
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consciencia-situacional
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: consciencia-situacional
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: consciencia-situacional-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            # Se o serviço expuser alguma porta HTTP (ex: para health checks), defina aqui
            # - containerPort: 5000 # Exemplo
          env:
            - name: KAFKA_BROKER_URL
              value: {{ .Values.kafka.broker_url | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.environment_vars.LOG_LEVEL | quote }}
            - name: REDIS_HOST
              value: {{ .Values.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            # As chaves de API devem ser montadas a partir de secrets
            - name: NEWS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.web_integration.apis.news.key_secret_name }}
                  key: NEWS_API_KEY # A chave dentro do Secret
            - name: FINANCE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.web_integration.apis.finance.key_secret_name }}
                  key: FINANCE_API_KEY
            - name: CLIMATE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.web_integration.apis.climate.key_secret_name }}
                  key: CLIMATE_API_KEY
            
            # Endpoints podem vir de ConfigMap ou diretamente de values.yaml
            # Exemplo se viessem de values.yaml (menos flexível que ConfigMap)
            # - name: NEWS_API_ENDPOINT
            #   value: {{ .Values.web_integration.apis.news.endpoint | quote }}
            # - name: FINANCE_API_ENDPOINT
            #   value: {{ .Values.web_integration.apis.finance.endpoint | quote }}
            # - name: CLIMATE_API_ENDPOINT
            #   value: {{ .Values.web_integration.apis.climate.endpoint | quote }}

          # Montar ConfigMaps para api_endpoints.yaml e whitelist.yaml
          volumeMounts:
            - name: api-endpoints-config
              mountPath: /app/config/api_endpoints.yaml # Caminho onde o app espera o arquivo
              subPath: api_endpoints.yaml
            - name: whitelist-config
              mountPath: /app/config/whitelist.yaml
              subPath: whitelist.yaml
          resources: {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: api-endpoints-config
          configMap:
            name: {{ .Values.api_configmap_name | default (printf "%s-api-endpoints" .Release.Name) }} # Nome do ConfigMap
        - name: whitelist-config
          configMap:
            name: {{ .Values.whitelist_configmap_name | default (printf "%s-whitelist" .Release.Name) }}

