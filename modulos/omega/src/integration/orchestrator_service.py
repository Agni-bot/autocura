#!/usr/bin/env python3
"""
Servi√ßo HTTP do Orquestrador de Integra√ß√£o
"""

import asyncio
import logging
import sys
from pathlib import Path
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import uvicorn

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent))

from modulos.omega.src.integration.integration_orchestrator import IntegrationOrchestrator

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="AutoCura Integration Orchestrator",
    description="Orquestrador de Integra√ß√£o entre M√≥dulos",
    version="1.0.0"
)

# Vari√°vel global
orchestrator = None


@app.on_event("startup")
async def startup_event():
    """Inicializa o orquestrador na inicializa√ß√£o"""
    global orchestrator
    
    logger.info("üîó Inicializando Orquestrador de Integra√ß√£o...")
    
    orchestrator = IntegrationOrchestrator()
    await orchestrator.initialize()
    
    logger.info("‚úÖ Orquestrador de Integra√ß√£o inicializado!")


@app.on_event("shutdown")
async def shutdown_event():
    """Finaliza o orquestrador no encerramento"""
    logger.info("üõë Finalizando Orquestrador de Integra√ß√£o...")
    logger.info("‚úÖ Orquestrador finalizado")


@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "service": "Integration Orchestrator",
        "status": "online",
        "version": "1.0.0"
    }


@app.get("/health")
async def health_check():
    """Verifica sa√∫de do servi√ßo"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "status": "healthy",
        "service": "integration-orchestrator",
        "initialized": orchestrator is not None
    }


@app.get("/modules/status")
async def get_modules_status():
    """Obt√©m status dos m√≥dulos"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "modules": {
            name: {
                "state": state.name,
                "health": orchestrator.module_health.get(name, 0.0)
            }
            for name, state in orchestrator.module_states.items()
        }
    }


@app.get("/protocols")
async def get_protocols():
    """Obt√©m protocolos de comunica√ß√£o dispon√≠veis"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "protocols": [p.name for p in orchestrator.communication_protocols]
    }


@app.get("/synergies/active")
async def get_active_synergies():
    """Obt√©m sinergias ativas"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "synergies": list(orchestrator.active_synergies)
    }


@app.post("/integrate/{source}/{target}")
async def integrate_modules(source: str, target: str):
    """Integra dois m√≥dulos"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    try:
        result = await orchestrator.integrate_modules(source, target)
        return {
            "status": "success",
            "source": source,
            "target": target,
            "integration_id": result.get("id")
        }
    except Exception as e:
        logger.error(f"Erro na integra√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/metrics/integration")
async def get_integration_metrics():
    """Obt√©m m√©tricas de integra√ß√£o"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "total_integrations": orchestrator.total_integrations,
        "successful_integrations": orchestrator.successful_integrations,
        "failed_integrations": orchestrator.failed_integrations,
        "average_integration_time": orchestrator.average_integration_time
    }


@app.post("/synergy/detect")
async def detect_synergies():
    """Detecta poss√≠veis sinergias entre m√≥dulos"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    try:
        synergies = await orchestrator.detect_synergies()
        return {
            "status": "success",
            "detected_synergies": synergies
        }
    except Exception as e:
        logger.error(f"Erro na detec√ß√£o de sinergias: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/communication/logs")
async def get_communication_logs():
    """Obt√©m logs de comunica√ß√£o recentes"""
    if not orchestrator:
        raise HTTPException(status_code=503, detail="Orquestrador n√£o inicializado")
        
    return {
        "logs": orchestrator.communication_logs[-100:]  # √öltimos 100 logs
    }


def main():
    """Fun√ß√£o principal"""
    port = 9004
    logger.info(f"üöÄ Iniciando Orquestrador de Integra√ß√£o na porta {port}")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )


if __name__ == "__main__":
    main() 