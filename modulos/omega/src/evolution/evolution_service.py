#!/usr/bin/env python3
"""
Servi√ßo HTTP do Motor de Evolu√ß√£o
"""

import asyncio
import logging
import sys
from pathlib import Path
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import uvicorn

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent))

from modulos.omega.src.evolution.evolution_engine import EvolutionEngine

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="AutoCura Evolution Engine",
    description="Motor de Evolu√ß√£o Adaptativa",
    version="1.0.0"
)

# Vari√°vel global
engine = None


@app.on_event("startup")
async def startup_event():
    """Inicializa o motor na inicializa√ß√£o"""
    global engine
    
    logger.info("üß¨ Inicializando Motor de Evolu√ß√£o...")
    
    engine = EvolutionEngine()
    await engine.initialize()
    
    logger.info("‚úÖ Motor de Evolu√ß√£o inicializado!")


@app.on_event("shutdown")
async def shutdown_event():
    """Finaliza o motor no encerramento"""
    logger.info("üõë Finalizando Motor de Evolu√ß√£o...")
    logger.info("‚úÖ Motor finalizado")


@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "service": "Evolution Engine",
        "status": "online",
        "version": "1.0.0"
    }


@app.get("/health")
async def health_check():
    """Verifica sa√∫de do servi√ßo"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    return {
        "status": "healthy",
        "service": "evolution-engine",
        "initialized": engine is not None
    }


@app.get("/population/status")
async def get_population_status():
    """Obt√©m status da popula√ß√£o"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    return {
        "generation": engine.generation,
        "population_size": len(engine.population),
        "best_fitness": engine.best_fitness,
        "average_fitness": engine.average_fitness
    }


@app.post("/evolve")
async def trigger_evolution():
    """Dispara um ciclo de evolu√ß√£o"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    try:
        await engine.evolve()
        return {
            "status": "success",
            "generation": engine.generation,
            "best_fitness": engine.best_fitness
        }
    except Exception as e:
        logger.error(f"Erro na evolu√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/strategies")
async def get_evolution_strategies():
    """Obt√©m estrat√©gias de evolu√ß√£o dispon√≠veis"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    return {
        "strategies": [s.name for s in engine.evolution_strategies]
    }


@app.get("/genome/{genome_id}")
async def get_genome(genome_id: str):
    """Obt√©m informa√ß√µes de um genoma espec√≠fico"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    genome = engine.get_genome(genome_id)
    if not genome:
        raise HTTPException(status_code=404, detail="Genoma n√£o encontrado")
        
    return JSONResponse(content=genome.to_dict())


@app.post("/mutate/{genome_id}")
async def mutate_genome(genome_id: str):
    """Aplica muta√ß√£o em um genoma"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    try:
        mutated = await engine.mutate_genome(genome_id)
        return {
            "status": "success",
            "original_id": genome_id,
            "mutated_id": mutated.id
        }
    except Exception as e:
        logger.error(f"Erro na muta√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/fitness/history")
async def get_fitness_history():
    """Obt√©m hist√≥rico de fitness"""
    if not engine:
        raise HTTPException(status_code=503, detail="Motor n√£o inicializado")
        
    return {
        "history": engine.fitness_history[-100:],  # √öltimas 100 gera√ß√µes
        "current_generation": engine.generation
    }


def main():
    """Fun√ß√£o principal"""
    port = 9003
    logger.info(f"üöÄ Iniciando Motor de Evolu√ß√£o na porta {port}")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )


if __name__ == "__main__":
    main() 