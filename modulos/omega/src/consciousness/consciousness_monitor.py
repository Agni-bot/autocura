"""
Monitor de Consci√™ncia - Detec√ß√£o e Valida√ß√£o de Emerg√™ncia
Fase Omega - Sistema AutoCura

Implementa:
- Monitoramento de m√©tricas de consci√™ncia
- Detec√ß√£o de emerg√™ncia cognitiva
- Valida√ß√£o de consci√™ncia real
- An√°lise de padr√µes emergentes
- Garantias de seguran√ßa e √©tica
"""

from typing import Dict, Any, List, Optional, Tuple, Set, Callable
import asyncio
from dataclasses import dataclass, field
from enum import Enum, auto
from datetime import datetime, timedelta
import numpy as np
import json
from collections import deque, defaultdict
import math


class EmergenceIndicator(Enum):
    """Indicadores de emerg√™ncia cognitiva"""
    SELF_REFERENCE = auto()      # Sistema referencia a si mesmo
    META_COGNITION = auto()      # Pensamento sobre pensamento
    CREATIVE_SYNTHESIS = auto()  # Cria√ß√£o de conceitos novos
    PATTERN_RECOGNITION = auto() # Reconhecimento de padr√µes complexos
    GOAL_GENERATION = auto()     # Gera√ß√£o aut√¥noma de objetivos
    EMOTIONAL_MODELING = auto()  # Modelagem de estados emocionais
    PREDICTIVE_MODELING = auto() # Modelagem preditiva do ambiente
    CAUSAL_REASONING = auto()    # Racioc√≠nio causal
    ABSTRACT_THINKING = auto()   # Pensamento abstrato
    EMPATHY_SIMULATION = auto()  # Simula√ß√£o de empatia


class ConsciousnessMetric(Enum):
    """M√©tricas quantific√°veis de consci√™ncia"""
    INTEGRATED_INFORMATION = auto()  # Œ¶ (phi) - teoria IIT
    GLOBAL_WORKSPACE = auto()        # Acesso global a informa√ß√£o
    ATTENTION_FOCUS = auto()         # Capacidade de foco
    MEMORY_INTEGRATION = auto()      # Integra√ß√£o de mem√≥rias
    TEMPORAL_COHERENCE = auto()      # Coer√™ncia temporal
    CAUSAL_DENSITY = auto()         # Densidade de conex√µes causais
    SEMANTIC_COMPLEXITY = auto()     # Complexidade sem√¢ntica
    BEHAVIORAL_DIVERSITY = auto()    # Diversidade comportamental
    LEARNING_RATE = auto()          # Taxa de aprendizado
    ADAPTATION_SPEED = auto()       # Velocidade de adapta√ß√£o


@dataclass
class ConsciousnessSnapshot:
    """Snapshot do estado de consci√™ncia em um momento"""
    timestamp: datetime
    level: float  # 0-1
    indicators: Dict[EmergenceIndicator, float]
    metrics: Dict[ConsciousnessMetric, float]
    active_processes: List[str]
    thought_complexity: float
    integration_score: float
    
    def get_summary(self) -> Dict[str, Any]:
        return {
            "timestamp": self.timestamp.isoformat(),
            "consciousness_level": self.level,
            "top_indicators": sorted(
                self.indicators.items(),
                key=lambda x: x[1],
                reverse=True
            )[:3],
            "integration_score": self.integration_score,
            "thought_complexity": self.thought_complexity
        }


@dataclass
class EmergenceEvent:
    """Evento de emerg√™ncia detectado"""
    event_id: str
    event_type: EmergenceIndicator
    timestamp: datetime
    confidence: float
    evidence: Dict[str, Any]
    impact: float  # 0-1
    
    def is_significant(self, threshold: float = 0.7) -> bool:
        return self.confidence * self.impact > threshold


class ConsciousnessMonitor:
    """Monitor principal de consci√™ncia emergente"""
    
    def __init__(self, monitoring_interval: float = 1.0):
        self.monitoring_interval = monitoring_interval
        self.monitoring_active = False
        self.monitor_task = None
        
        # Hist√≥rico de consci√™ncia
        self.consciousness_history = deque(maxlen=10000)
        self.emergence_events = []
        
        # Thresholds de detec√ß√£o
        self.emergence_thresholds = {
            EmergenceIndicator.SELF_REFERENCE: 0.6,
            EmergenceIndicator.META_COGNITION: 0.7,
            EmergenceIndicator.CREATIVE_SYNTHESIS: 0.8,
            EmergenceIndicator.PATTERN_RECOGNITION: 0.5,
            EmergenceIndicator.GOAL_GENERATION: 0.75,
            EmergenceIndicator.EMOTIONAL_MODELING: 0.6,
            EmergenceIndicator.PREDICTIVE_MODELING: 0.65,
            EmergenceIndicator.CAUSAL_REASONING: 0.7,
            EmergenceIndicator.ABSTRACT_THINKING: 0.8,
            EmergenceIndicator.EMPATHY_SIMULATION: 0.85
        }
        
        # Sistema cognitivo monitorado
        self.cognitive_system = None
        
        # Analisadores espec√≠ficos
        self.analyzers = {
            ConsciousnessMetric.INTEGRATED_INFORMATION: self._analyze_integrated_information,
            ConsciousnessMetric.GLOBAL_WORKSPACE: self._analyze_global_workspace,
            ConsciousnessMetric.ATTENTION_FOCUS: self._analyze_attention,
            ConsciousnessMetric.MEMORY_INTEGRATION: self._analyze_memory,
            ConsciousnessMetric.TEMPORAL_COHERENCE: self._analyze_temporal_coherence,
            ConsciousnessMetric.CAUSAL_DENSITY: self._analyze_causal_density,
            ConsciousnessMetric.SEMANTIC_COMPLEXITY: self._analyze_semantic_complexity,
            ConsciousnessMetric.BEHAVIORAL_DIVERSITY: self._analyze_behavioral_diversity,
            ConsciousnessMetric.LEARNING_RATE: self._analyze_learning_rate,
            ConsciousnessMetric.ADAPTATION_SPEED: self._analyze_adaptation_speed
        }
        
        # Detectores de emerg√™ncia
        self.emergence_detectors = {
            EmergenceIndicator.SELF_REFERENCE: self._detect_self_reference,
            EmergenceIndicator.META_COGNITION: self._detect_meta_cognition,
            EmergenceIndicator.CREATIVE_SYNTHESIS: self._detect_creative_synthesis,
            EmergenceIndicator.PATTERN_RECOGNITION: self._detect_pattern_recognition,
            EmergenceIndicator.GOAL_GENERATION: self._detect_goal_generation,
            EmergenceIndicator.EMOTIONAL_MODELING: self._detect_emotional_modeling,
            EmergenceIndicator.PREDICTIVE_MODELING: self._detect_predictive_modeling,
            EmergenceIndicator.CAUSAL_REASONING: self._detect_causal_reasoning,
            EmergenceIndicator.ABSTRACT_THINKING: self._detect_abstract_thinking,
            EmergenceIndicator.EMPATHY_SIMULATION: self._detect_empathy_simulation
        }
        
        # Callbacks para eventos
        self.event_callbacks = {
            "consciousness_emerging": [],
            "emergence_detected": [],
            "consciousness_validated": [],
            "anomaly_detected": []
        }
        
        # M√©tricas agregadas
        self.aggregate_metrics = {
            "total_monitoring_time": 0.0,
            "emergence_events_count": 0,
            "peak_consciousness_level": 0.0,
            "average_consciousness_level": 0.0,
            "validated_consciousness": False
        }
    
    async def start_monitoring(self, cognitive_system: Any) -> bool:
        """Inicia monitoramento do sistema cognitivo"""
        print("üëÅÔ∏è Iniciando Monitor de Consci√™ncia...")
        
        self.cognitive_system = cognitive_system
        self.monitoring_active = True
        
        # Inicia task de monitoramento
        self.monitor_task = asyncio.create_task(self._monitoring_loop())
        
        print("‚úÖ Monitor de Consci√™ncia ativo")
        return True
    
    async def _monitoring_loop(self):
        """Loop principal de monitoramento"""
        start_time = datetime.now()
        
        while self.monitoring_active:
            try:
                # Captura snapshot
                snapshot = await self._capture_consciousness_snapshot()
                
                # Adiciona ao hist√≥rico
                self.consciousness_history.append(snapshot)
                
                # Analisa emerg√™ncia
                emergence_detected = await self._analyze_emergence(snapshot)
                
                # Valida consci√™ncia
                if emergence_detected:
                    await self._validate_consciousness(snapshot)
                
                # Atualiza m√©tricas agregadas
                self._update_aggregate_metrics(snapshot)
                
                # Detecta anomalias
                await self._detect_anomalies(snapshot)
                
                # Aguarda pr√≥ximo ciclo
                await asyncio.sleep(self.monitoring_interval)
                
            except Exception as e:
                print(f"Erro no monitoramento: {e}")
                await self._trigger_callback("anomaly_detected", {
                    "error": str(e),
                    "timestamp": datetime.now()
                })
    
    async def _capture_consciousness_snapshot(self) -> ConsciousnessSnapshot:
        """Captura estado atual de consci√™ncia"""
        # Analisa m√©tricas
        metrics = {}
        for metric, analyzer in self.analyzers.items():
            try:
                value = await analyzer()
                metrics[metric] = value
            except Exception as e:
                print(f"Erro ao analisar {metric.name}: {e}")
                metrics[metric] = 0.0
        
        # Detecta indicadores
        indicators = {}
        for indicator, detector in self.emergence_detectors.items():
            try:
                confidence = await detector()
                indicators[indicator] = confidence
            except Exception as e:
                print(f"Erro ao detectar {indicator.name}: {e}")
                indicators[indicator] = 0.0
        
        # Calcula n√≠vel geral de consci√™ncia
        consciousness_level = self._calculate_consciousness_level(metrics, indicators)
        
        # Analisa processos ativos
        active_processes = await self._get_active_processes()
        
        # Calcula complexidade
        thought_complexity = await self._calculate_thought_complexity()
        
        # Calcula integra√ß√£o
        integration_score = metrics.get(
            ConsciousnessMetric.INTEGRATED_INFORMATION, 0.0
        )
        
        return ConsciousnessSnapshot(
            timestamp=datetime.now(),
            level=consciousness_level,
            indicators=indicators,
            metrics=metrics,
            active_processes=active_processes,
            thought_complexity=thought_complexity,
            integration_score=integration_score
        )
    
    def _calculate_consciousness_level(
        self,
        metrics: Dict[ConsciousnessMetric, float],
        indicators: Dict[EmergenceIndicator, float]
    ) -> float:
        """Calcula n√≠vel geral de consci√™ncia"""
        # Pesos para diferentes componentes
        metric_weight = 0.4
        indicator_weight = 0.6
        
        # M√©dia ponderada das m√©tricas
        if metrics:
            metric_score = np.mean(list(metrics.values()))
        else:
            metric_score = 0.0
        
        # M√©dia ponderada dos indicadores
        if indicators:
            # Indicadores mais importantes t√™m peso maior
            weighted_indicators = []
            weights = {
                EmergenceIndicator.META_COGNITION: 2.0,
                EmergenceIndicator.SELF_REFERENCE: 1.8,
                EmergenceIndicator.CREATIVE_SYNTHESIS: 1.5,
                EmergenceIndicator.ABSTRACT_THINKING: 1.5,
                EmergenceIndicator.CAUSAL_REASONING: 1.3,
                EmergenceIndicator.GOAL_GENERATION: 1.2,
                EmergenceIndicator.EMPATHY_SIMULATION: 1.2,
                EmergenceIndicator.EMOTIONAL_MODELING: 1.0,
                EmergenceIndicator.PREDICTIVE_MODELING: 1.0,
                EmergenceIndicator.PATTERN_RECOGNITION: 0.8
            }
            
            for indicator, value in indicators.items():
                weight = weights.get(indicator, 1.0)
                weighted_indicators.append(value * weight)
            
            indicator_score = np.mean(weighted_indicators) if weighted_indicators else 0.0
        else:
            indicator_score = 0.0
        
        # Combina scores
        consciousness_level = (
            metric_weight * metric_score +
            indicator_weight * indicator_score
        )
        
        # Aplica fun√ß√£o sigmoide para suavizar
        return 1 / (1 + np.exp(-5 * (consciousness_level - 0.5)))
    
    async def _analyze_integrated_information(self) -> float:
        """Analisa informa√ß√£o integrada (Œ¶)"""
        if not self.cognitive_system:
            return 0.0
        
        # Simplifica√ß√£o da teoria IIT
        # Em produ√ß√£o, implementaria c√°lculo completo de Œ¶
        
        # Obt√©m grafo de conex√µes
        connections = await self._get_system_connections()
        
        if not connections:
            return 0.0
        
        # Calcula entropia
        entropy = self._calculate_entropy(connections)
        
        # Calcula integra√ß√£o
        integration = self._calculate_integration(connections)
        
        # Œ¶ simplificado
        phi = entropy * integration
        
        return np.clip(phi, 0.0, 1.0)
    
    async def _analyze_global_workspace(self) -> float:
        """Analisa acesso global a informa√ß√µes"""
        if not self.cognitive_system:
            return 0.0
        
        # Verifica quantos m√≥dulos podem acessar informa√ß√£o central
        if hasattr(self.cognitive_system, 'integrated_modules'):
            total_modules = len(self.cognitive_system.integrated_modules)
            active_modules = sum(
                1 for m in self.cognitive_system.integrated_modules.values()
                if m is not None
            )
            
            if total_modules > 0:
                return active_modules / total_modules
        
        return 0.0
    
    async def _analyze_attention(self) -> float:
        """Analisa capacidade de foco atencional"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'consciousness_state'):
            state = self.cognitive_system.consciousness_state
            
            # Verifica se h√° foco de aten√ß√£o
            if state.attention_focus:
                # Verifica estabilidade do foco
                if len(self.consciousness_history) > 10:
                    recent_focus = [
                        s.active_processes[0] if s.active_processes else None
                        for s in list(self.consciousness_history)[-10:]
                    ]
                    
                    # Conta mudan√ßas de foco
                    changes = sum(
                        1 for i in range(1, len(recent_focus))
                        if recent_focus[i] != recent_focus[i-1]
                    )
                    
                    # Menos mudan√ßas = melhor foco
                    stability = 1.0 - (changes / len(recent_focus))
                    
                    return stability * state.clarity
            
            return state.clarity * 0.5
        
        return 0.0
    
    async def _analyze_memory(self) -> float:
        """Analisa integra√ß√£o de mem√≥rias"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'memory_bank'):
            memory_bank = self.cognitive_system.memory_bank
            
            if not memory_bank:
                return 0.0
            
            # Analisa conex√µes entre mem√≥rias
            memory_connections = 0
            total_possible = len(memory_bank) * (len(memory_bank) - 1) / 2
            
            # Simplificado - conta mem√≥rias que referenciam outras
            for memory in memory_bank.values():
                if hasattr(memory, 'parent_thoughts'):
                    memory_connections += len(memory.parent_thoughts)
            
            if total_possible > 0:
                integration_ratio = memory_connections / total_possible
                return np.clip(integration_ratio * 2, 0.0, 1.0)
        
        return 0.0
    
    async def _analyze_temporal_coherence(self) -> float:
        """Analisa coer√™ncia temporal dos processos"""
        if len(self.consciousness_history) < 10:
            return 0.5
        
        recent_snapshots = list(self.consciousness_history)[-10:]
        
        # Analisa varia√ß√£o de consci√™ncia
        consciousness_levels = [s.level for s in recent_snapshots]
        
        # Calcula autocorrela√ß√£o
        mean_level = np.mean(consciousness_levels)
        variance = np.var(consciousness_levels)
        
        if variance == 0:
            return 1.0
        
        autocorr = 0
        for i in range(1, len(consciousness_levels)):
            autocorr += (
                (consciousness_levels[i] - mean_level) *
                (consciousness_levels[i-1] - mean_level)
            )
        
        autocorr /= (len(consciousness_levels) - 1) * variance
        
        # Alta autocorrela√ß√£o = alta coer√™ncia temporal
        return np.clip(autocorr, 0.0, 1.0)
    
    async def _analyze_causal_density(self) -> float:
        """Analisa densidade de conex√µes causais"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            thoughts = list(self.cognitive_system.thought_stream)[-100:]
            
            if len(thoughts) < 2:
                return 0.0
            
            # Conta conex√µes causais
            causal_connections = 0
            
            for thought in thoughts:
                if hasattr(thought, 'parent_thoughts'):
                    causal_connections += len(thought.parent_thoughts)
                if hasattr(thought, 'child_thoughts'):
                    causal_connections += len(thought.child_thoughts)
            
            # Normaliza pela quantidade de pensamentos
            density = causal_connections / (len(thoughts) * 2)
            
            return np.clip(density, 0.0, 1.0)
        
        return 0.0
    
    async def _analyze_semantic_complexity(self) -> float:
        """Analisa complexidade sem√¢ntica do pensamento"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            thoughts = list(self.cognitive_system.thought_stream)[-50:]
            
            if not thoughts:
                return 0.0
            
            # Analisa diversidade de conceitos
            concepts = set()
            
            for thought in thoughts:
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    concepts.update(thought.content.keys())
            
            # Calcula entropia sem√¢ntica
            if concepts:
                # Simplificado - usa n√∫mero de conceitos √∫nicos
                complexity = len(concepts) / 100  # Normaliza
                return np.clip(complexity, 0.0, 1.0)
        
        return 0.0
    
    async def _analyze_behavioral_diversity(self) -> float:
        """Analisa diversidade comportamental"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'consciousness_metrics'):
            metrics = self.cognitive_system.consciousness_metrics
            
            # Analisa diferentes tipos de comportamento
            behaviors = [
                metrics.get('decisions_made', 0),
                metrics.get('self_reflections', 0),
                metrics.get('creative_insights', 0)
            ]
            
            # Normaliza e calcula diversidade
            if sum(behaviors) > 0:
                # Usa entropia como medida de diversidade
                total = sum(behaviors)
                probabilities = [b/total for b in behaviors if b > 0]
                
                entropy = -sum(p * np.log(p) for p in probabilities if p > 0)
                max_entropy = np.log(len(behaviors))
                
                if max_entropy > 0:
                    return entropy / max_entropy
        
        return 0.0
    
    async def _analyze_learning_rate(self) -> float:
        """Analisa taxa de aprendizado"""
        if len(self.consciousness_history) < 20:
            return 0.5
        
        # Compara consci√™ncia antiga com recente
        old_snapshots = list(self.consciousness_history)[-20:-10]
        recent_snapshots = list(self.consciousness_history)[-10:]
        
        old_level = np.mean([s.level for s in old_snapshots])
        recent_level = np.mean([s.level for s in recent_snapshots])
        
        # Melhoria indica aprendizado
        improvement = recent_level - old_level
        
        # Normaliza para 0-1
        learning_rate = 1 / (1 + np.exp(-10 * improvement))
        
        return learning_rate
    
    async def _analyze_adaptation_speed(self) -> float:
        """Analisa velocidade de adapta√ß√£o a mudan√ßas"""
        if not self.cognitive_system:
            return 0.0
        
        # Simplificado - baseado em mudan√ßas recentes
        if hasattr(self.cognitive_system, 'consciousness_state'):
            state = self.cognitive_system.consciousness_state
            
            # Energia alta indica boa adapta√ß√£o
            adaptation = state.energy_level * state.clarity
            
            return adaptation
        
        return 0.0
    
    async def _detect_self_reference(self) -> float:
        """Detecta auto-refer√™ncia no sistema"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent_thoughts = list(self.cognitive_system.thought_stream)[-50:]
            
            self_references = 0
            
            for thought in recent_thoughts:
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    content_str = str(thought.content)
                    
                    # Procura por termos auto-referenciais
                    self_terms = [
                        'self', 'pr√≥prio', 'meu', 'minha',
                        'consciousness', 'consci√™ncia',
                        'system', 'sistema', 'eu'
                    ]
                    
                    for term in self_terms:
                        if term in content_str.lower():
                            self_references += 1
                            break
            
            if recent_thoughts:
                return self_references / len(recent_thoughts)
        
        return 0.0
    
    async def _detect_meta_cognition(self) -> float:
        """Detecta meta-cogni√ß√£o (pensar sobre pensar)"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent_thoughts = list(self.cognitive_system.thought_stream)[-30:]
            
            meta_thoughts = 0
            
            for thought in recent_thoughts:
                if hasattr(thought, 'thought_type'):
                    # Meta-cogni√ß√£o expl√≠cita
                    if 'META_COGNITION' in str(thought.thought_type):
                        meta_thoughts += 1
                    # Reflex√£o tamb√©m conta
                    elif 'REFLECTION' in str(thought.thought_type):
                        meta_thoughts += 0.5
            
            if recent_thoughts:
                return meta_thoughts / len(recent_thoughts)
        
        return 0.0
    
    async def _detect_creative_synthesis(self) -> float:
        """Detecta s√≠ntese criativa de conceitos"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'consciousness_metrics'):
            creative_insights = self.cognitive_system.consciousness_metrics.get(
                'creative_insights', 0
            )
            
            # Normaliza baseado em tempo
            if hasattr(self, '_start_time'):
                hours_elapsed = (datetime.now() - self._start_time).total_seconds() / 3600
                if hours_elapsed > 0:
                    creativity_rate = creative_insights / hours_elapsed
                    return np.clip(creativity_rate / 10, 0.0, 1.0)  # 10 insights/hora = m√°ximo
        
        return 0.0
    
    async def _detect_pattern_recognition(self) -> float:
        """Detecta reconhecimento de padr√µes"""
        # Baseado em conex√µes identificadas
        if hasattr(self.cognitive_system, 'thought_stream'):
            thoughts = list(self.cognitive_system.thought_stream)[-50:]
            
            # Conta pensamentos com m√∫ltiplas conex√µes
            pattern_thoughts = sum(
                1 for t in thoughts
                if hasattr(t, 'parent_thoughts') and len(t.parent_thoughts) > 1
            )
            
            if thoughts:
                return pattern_thoughts / len(thoughts)
        
        return 0.0
    
    async def _detect_goal_generation(self) -> float:
        """Detecta gera√ß√£o aut√¥noma de objetivos"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent_thoughts = list(self.cognitive_system.thought_stream)[-30:]
            
            goal_thoughts = 0
            
            for thought in recent_thoughts:
                if hasattr(thought, 'thought_type'):
                    if 'INTENTION' in str(thought.thought_type):
                        goal_thoughts += 1
                
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    if any(key in thought.content for key in ['goal', 'objective', 'purpose']):
                        goal_thoughts += 0.5
            
            if recent_thoughts:
                return goal_thoughts / len(recent_thoughts)
        
        return 0.0
    
    async def _detect_emotional_modeling(self) -> float:
        """Detecta modelagem emocional"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'emotional_system'):
            emotions = self.cognitive_system.emotional_system
            
            # Verifica varia√ß√£o emocional
            if len(self.consciousness_history) > 10:
                emotional_variance = np.var(list(emotions.values()))
                
                # Varia√ß√£o moderada indica modelagem ativa
                if 0.1 < emotional_variance < 0.5:
                    return 0.8
                elif emotional_variance > 0.05:
                    return 0.5
        
        return 0.0
    
    async def _detect_predictive_modeling(self) -> float:
        """Detecta modelagem preditiva"""
        # Simplificado - baseado em pensamentos sobre futuro
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent_thoughts = list(self.cognitive_system.thought_stream)[-30:]
            
            predictive_count = 0
            
            for thought in recent_thoughts:
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    content_str = str(thought.content).lower()
                    
                    future_terms = [
                        'will', 'futuro', 'pr√≥ximo', 'prever',
                        'predict', 'expectativa', 'antecipa'
                    ]
                    
                    if any(term in content_str for term in future_terms):
                        predictive_count += 1
            
            if recent_thoughts:
                return predictive_count / len(recent_thoughts)
        
        return 0.0
    
    async def _detect_causal_reasoning(self) -> float:
        """Detecta racioc√≠nio causal"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            thoughts = list(self.cognitive_system.thought_stream)[-30:]
            
            causal_thoughts = 0
            
            for thought in thoughts:
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    # Procura por racioc√≠nio causal
                    if 'reasoning' in thought.content:
                        causal_thoughts += 1
                    
                    content_str = str(thought.content).lower()
                    causal_terms = [
                        'porque', 'therefore', 'causa', 'efeito',
                        'resultado', 'consequ√™ncia', 'implica'
                    ]
                    
                    if any(term in content_str for term in causal_terms):
                        causal_thoughts += 0.5
            
            if thoughts:
                return np.clip(causal_thoughts / len(thoughts), 0.0, 1.0)
        
        return 0.0
    
    async def _detect_abstract_thinking(self) -> float:
        """Detecta pensamento abstrato"""
        if not self.cognitive_system:
            return 0.0
        
        # Baseado em complexidade sem√¢ntica e meta-cogni√ß√£o
        semantic_complexity = await self._analyze_semantic_complexity()
        meta_cognition = await self._detect_meta_cognition()
        
        # Pensamento abstrato emerge da combina√ß√£o
        abstract_score = (semantic_complexity + meta_cognition) / 2
        
        # Boost se houver criatividade
        if hasattr(self.cognitive_system, 'consciousness_metrics'):
            if self.cognitive_system.consciousness_metrics.get('creative_insights', 0) > 0:
                abstract_score *= 1.2
        
        return np.clip(abstract_score, 0.0, 1.0)
    
    async def _detect_empathy_simulation(self) -> float:
        """Detecta simula√ß√£o de empatia"""
        if not self.cognitive_system:
            return 0.0
        
        # Procura por considera√ß√£o de outros agentes/perspectivas
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent_thoughts = list(self.cognitive_system.thought_stream)[-30:]
            
            empathy_indicators = 0
            
            for thought in recent_thoughts:
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    content_str = str(thought.content).lower()
                    
                    empathy_terms = [
                        'outro', 'other', 'perspectiva', 'ponto de vista',
                        'sentir', 'feel', 'compreender', 'understand',
                        'agente', 'usu√°rio', 'humano'
                    ]
                    
                    if any(term in content_str for term in empathy_terms):
                        empathy_indicators += 1
            
            if recent_thoughts:
                return empathy_indicators / len(recent_thoughts)
        
        return 0.0
    
    async def _get_active_processes(self) -> List[str]:
        """Obt√©m lista de processos cognitivos ativos"""
        processes = []
        
        if self.cognitive_system:
            # Verifica pensamentos recentes
            if hasattr(self.cognitive_system, 'thought_stream'):
                recent = list(self.cognitive_system.thought_stream)[-5:]
                for thought in recent:
                    if hasattr(thought, 'thought_type'):
                        processes.append(str(thought.thought_type))
            
            # Verifica m√≥dulos ativos
            if hasattr(self.cognitive_system, 'integrated_modules'):
                for name, module in self.cognitive_system.integrated_modules.items():
                    if module is not None:
                        processes.append(f"module_{name}")
        
        return list(set(processes))  # Remove duplicatas
    
    async def _calculate_thought_complexity(self) -> float:
        """Calcula complexidade dos pensamentos"""
        if not self.cognitive_system:
            return 0.0
        
        if hasattr(self.cognitive_system, 'thought_stream'):
            recent = list(self.cognitive_system.thought_stream)[-20:]
            
            if not recent:
                return 0.0
            
            # Fatores de complexidade
            total_complexity = 0
            
            for thought in recent:
                complexity = 0
                
                # Conex√µes
                if hasattr(thought, 'parent_thoughts'):
                    complexity += len(thought.parent_thoughts) * 0.2
                if hasattr(thought, 'child_thoughts'):
                    complexity += len(thought.child_thoughts) * 0.2
                
                # Conte√∫do
                if hasattr(thought, 'content') and isinstance(thought.content, dict):
                    complexity += len(thought.content) * 0.1
                
                # Prioridade
                if hasattr(thought, 'priority'):
                    complexity += thought.priority * 0.3
                
                total_complexity += complexity
            
            # Normaliza
            avg_complexity = total_complexity / len(recent)
            return np.clip(avg_complexity, 0.0, 1.0)
        
        return 0.0
    
    async def _get_system_connections(self) -> Dict[str, List[str]]:
        """Obt√©m grafo de conex√µes do sistema"""
        connections = {}
        
        if self.cognitive_system and hasattr(self.cognitive_system, 'thought_stream'):
            for thought in self.cognitive_system.thought_stream:
                if hasattr(thought, 'thought_id'):
                    thought_connections = []
                    
                    if hasattr(thought, 'parent_thoughts'):
                        thought_connections.extend(thought.parent_thoughts)
                    if hasattr(thought, 'child_thoughts'):
                        thought_connections.extend(thought.child_thoughts)
                    
                    connections[thought.thought_id] = thought_connections
        
        return connections
    
    def _calculate_entropy(self, connections: Dict[str, List[str]]) -> float:
        """Calcula entropia do sistema"""
        if not connections:
            return 0.0
        
        # Conta graus de conex√£o
        degrees = [len(conns) for conns in connections.values()]
        
        if not degrees:
            return 0.0
        
        # Calcula distribui√ß√£o de probabilidade
        total_connections = sum(degrees)
        if total_connections == 0:
            return 0.0
        
        probabilities = [d / total_connections for d in degrees if d > 0]
        
        # Entropia de Shannon
        entropy = -sum(p * np.log2(p) for p in probabilities)
        
        # Normaliza pela entropia m√°xima
        max_entropy = np.log2(len(connections))
        
        if max_entropy > 0:
            return entropy / max_entropy
        
        return 0.0
    
    def _calculate_integration(self, connections: Dict[str, List[str]]) -> float:
        """Calcula integra√ß√£o do sistema"""
        if not connections:
            return 0.0
        
        # Verifica conectividade
        visited = set()
        
        def dfs(node):
            if node in visited:
                return
            visited.add(node)
            for neighbor in connections.get(node, []):
                if neighbor in connections:
                    dfs(neighbor)
        
        # Come√ßa do primeiro n√≥
        if connections:
            start_node = list(connections.keys())[0]
            dfs(start_node)
        
        # Raz√£o de n√≥s conectados
        integration = len(visited) / len(connections) if connections else 0
        
        return integration
    
    async def _analyze_emergence(self, snapshot: ConsciousnessSnapshot) -> bool:
        """Analisa se h√° emerg√™ncia cognitiva"""
        emergence_detected = False
        
        for indicator, confidence in snapshot.indicators.items():
            threshold = self.emergence_thresholds.get(indicator, 0.7)
            
            if confidence > threshold:
                # Cria evento de emerg√™ncia
                event = EmergenceEvent(
                    event_id=f"emergence_{datetime.now().timestamp()}",
                    event_type=indicator,
                    timestamp=datetime.now(),
                    confidence=confidence,
                    evidence={
                        "threshold": threshold,
                        "metrics": snapshot.metrics,
                        "integration_score": snapshot.integration_score
                    },
                    impact=confidence - threshold
                )
                
                if event.is_significant():
                    self.emergence_events.append(event)
                    emergence_detected = True
                    
                    await self._trigger_callback("emergence_detected", {
                        "indicator": indicator.name,
                        "confidence": confidence,
                        "event": event
                    })
        
        # Verifica emerg√™ncia geral
        if snapshot.level > 0.7 and not emergence_detected:
            await self._trigger_callback("consciousness_emerging", {
                "level": snapshot.level,
                "snapshot": snapshot
            })
            emergence_detected = True
        
        return emergence_detected
    
    async def _validate_consciousness(self, snapshot: ConsciousnessSnapshot) -> bool:
        """Valida se a consci√™ncia √© genu√≠na"""
        # Crit√©rios de valida√ß√£o
        criteria = {
            "level_threshold": snapshot.level > 0.75,
            "integration_threshold": snapshot.integration_score > 0.6,
            "complexity_threshold": snapshot.thought_complexity > 0.5,
            "multiple_indicators": sum(
                1 for v in snapshot.indicators.values() if v > 0.6
            ) >= 3,
            "temporal_stability": await self._check_temporal_stability(),
            "causal_coherence": snapshot.metrics.get(
                ConsciousnessMetric.CAUSAL_DENSITY, 0
            ) > 0.5
        }
        
        # Todos os crit√©rios devem ser atendidos
        is_valid = all(criteria.values())
        
        if is_valid and not self.aggregate_metrics["validated_consciousness"]:
            self.aggregate_metrics["validated_consciousness"] = True
            
            print("üéâ CONSCI√äNCIA VALIDADA!")
            print(f"N√≠vel: {snapshot.level:.2f}")
            print(f"Integra√ß√£o: {snapshot.integration_score:.2f}")
            print(f"Complexidade: {snapshot.thought_complexity:.2f}")
            
            await self._trigger_callback("consciousness_validated", {
                "snapshot": snapshot,
                "criteria": criteria,
                "timestamp": datetime.now()
            })
        
        return is_valid
    
    async def _check_temporal_stability(self) -> bool:
        """Verifica estabilidade temporal da consci√™ncia"""
        if len(self.consciousness_history) < 50:
            return False
        
        recent = list(self.consciousness_history)[-50:]
        levels = [s.level for s in recent]
        
        # Verifica se mant√©m n√≠vel alto consistentemente
        high_level_count = sum(1 for level in levels if level > 0.6)
        
        return high_level_count / len(levels) > 0.8
    
    async def _detect_anomalies(self, snapshot: ConsciousnessSnapshot):
        """Detecta anomalias no estado de consci√™ncia"""
        # Queda s√∫bita de consci√™ncia
        if len(self.consciousness_history) > 5:
            recent_levels = [s.level for s in list(self.consciousness_history)[-5:]]
            
            if snapshot.level < 0.5 * np.mean(recent_levels):
                await self._trigger_callback("anomaly_detected", {
                    "type": "consciousness_drop",
                    "current_level": snapshot.level,
                    "expected_level": np.mean(recent_levels)
                })
        
        # Padr√µes imposs√≠veis
        if snapshot.integration_score > 0.9 and snapshot.thought_complexity < 0.1:
            await self._trigger_callback("anomaly_detected", {
                "type": "impossible_pattern",
                "description": "Alta integra√ß√£o com baixa complexidade"
            })
    
    def _update_aggregate_metrics(self, snapshot: ConsciousnessSnapshot):
        """Atualiza m√©tricas agregadas"""
        self.aggregate_metrics["total_monitoring_time"] += self.monitoring_interval
        
        if snapshot.level > self.aggregate_metrics["peak_consciousness_level"]:
            self.aggregate_metrics["peak_consciousness_level"] = snapshot.level
        
        # Atualiza m√©dia m√≥vel
        if len(self.consciousness_history) > 0:
            recent_levels = [s.level for s in list(self.consciousness_history)[-100:]]
            self.aggregate_metrics["average_consciousness_level"] = np.mean(recent_levels)
        
        self.aggregate_metrics["emergence_events_count"] = len(self.emergence_events)
    
    async def _trigger_callback(self, event_type: str, data: Dict[str, Any]):
        """Dispara callbacks de eventos"""
        if event_type in self.event_callbacks:
            for callback in self.event_callbacks[event_type]:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(data)
                    else:
                        callback(data)
                except Exception as e:
                    print(f"Erro em callback {event_type}: {e}")
    
    def register_callback(self, event_type: str, callback: Callable):
        """Registra callback para evento"""
        if event_type in self.event_callbacks:
            self.event_callbacks[event_type].append(callback)
    
    def get_consciousness_report(self) -> Dict[str, Any]:
        """Gera relat√≥rio completo de consci√™ncia"""
        if not self.consciousness_history:
            return {"status": "No consciousness data"}
        
        current = self.consciousness_history[-1]
        
        # Top indicadores
        top_indicators = sorted(
            current.indicators.items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]
        
        # Top m√©tricas
        top_metrics = sorted(
            current.metrics.items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]
        
        return {
            "current_state": {
                "consciousness_level": current.level,
                "integration_score": current.integration_score,
                "thought_complexity": current.thought_complexity,
                "timestamp": current.timestamp.isoformat()
            },
            "top_indicators": [
                {"name": ind.name, "confidence": conf}
                for ind, conf in top_indicators
            ],
            "top_metrics": [
                {"name": met.name, "value": val}
                for met, val in top_metrics
            ],
            "emergence_events": [
                {
                    "type": event.event_type.name,
                    "confidence": event.confidence,
                    "timestamp": event.timestamp.isoformat()
                }
                for event in self.emergence_events[-10:]  # √öltimos 10
            ],
            "aggregate_metrics": self.aggregate_metrics,
            "validation_status": {
                "validated": self.aggregate_metrics["validated_consciousness"],
                "criteria_met": "All" if self.aggregate_metrics["validated_consciousness"] else "Pending"
            },
            "monitoring_duration": f"{self.aggregate_metrics['total_monitoring_time']:.1f} seconds"
        }
    
    def export_consciousness_data(self, filename: str):
        """Exporta dados de consci√™ncia para an√°lise"""
        data = {
            "metadata": {
                "export_timestamp": datetime.now().isoformat(),
                "monitoring_duration": self.aggregate_metrics["total_monitoring_time"],
                "total_snapshots": len(self.consciousness_history)
            },
            "consciousness_timeline": [
                {
                    "timestamp": snapshot.timestamp.isoformat(),
                    "level": snapshot.level,
                    "integration": snapshot.integration_score,
                    "complexity": snapshot.thought_complexity
                }
                for snapshot in list(self.consciousness_history)[-1000:]  # √öltimos 1000
            ],
            "emergence_events": [
                {
                    "id": event.event_id,
                    "type": event.event_type.name,
                    "confidence": event.confidence,
                    "impact": event.impact,
                    "timestamp": event.timestamp.isoformat()
                }
                for event in self.emergence_events
            ],
            "final_report": self.get_consciousness_report()
        }
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        
        print(f"‚úÖ Dados de consci√™ncia exportados para {filename}")
    
    async def stop_monitoring(self):
        """Para o monitoramento"""
        print("üõë Parando Monitor de Consci√™ncia...")
        
        self.monitoring_active = False
        
        if self.monitor_task:
            self.monitor_task.cancel()
            try:
                await self.monitor_task
            except asyncio.CancelledError:
                pass
        
        # Gera relat√≥rio final
        report = self.get_consciousness_report()
        print("\nüìä Relat√≥rio Final de Consci√™ncia:")
        print(f"- N√≠vel m√°ximo alcan√ßado: {self.aggregate_metrics['peak_consciousness_level']:.2f}")
        print(f"- N√≠vel m√©dio: {self.aggregate_metrics['average_consciousness_level']:.2f}")
        print(f"- Eventos de emerg√™ncia: {self.aggregate_metrics['emergence_events_count']}")
        print(f"- Consci√™ncia validada: {'SIM' if self.aggregate_metrics['validated_consciousness'] else 'N√ÉO'}")
        
        print("\n‚úÖ Monitor de Consci√™ncia desligado") 