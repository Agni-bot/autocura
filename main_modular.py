#!/usr/bin/env python3
"""
Sistema AutoCura - Main Modular
===============================

Vers√£o modular do sistema AutoCura com nova estrutura organizacional.
"""

import sys
import os
import logging
from pathlib import Path
from datetime import datetime
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Tentativa de importa√ß√µes modulares com fallbacks
modules_status = {
    "core": False,
    "services": False,
    "monitoring": False,
    "security": False
}

# === IMPORTA√á√ïES CORE ===
try:
    from autocura.core.memoria.gerenciador_memoria import GerenciadorMemoria
    from autocura.core.memoria.registrador_contexto import RegistradorContexto
    modules_status["core"] = True
    logger.info("‚úÖ M√≥dulos core carregados da nova estrutura")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è M√≥dulos core n√£o dispon√≠veis na nova estrutura: {e}")
    try:
        from src.core.memoria.gerenciador_memoria import GerenciadorMemoria
        from src.core.memoria.registrador_contexto import RegistradorContexto
        modules_status["core"] = True
        logger.info("‚úÖ M√≥dulos core carregados da estrutura antiga")
    except ImportError:
        logger.error("‚ùå Nenhuma estrutura core dispon√≠vel")

# === IMPORTA√á√ïES SERVICES ===
try:
    from autocura.services.diagnostico import DiagnosticoSistema, RealSuggestionsDetector
    modules_status["services"] = True
    logger.info("‚úÖ Servi√ßos carregados da nova estrutura")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Servi√ßos n√£o dispon√≠veis na nova estrutura: {e}")
    try:
        from src.services.diagnostico.diagnostico import DiagnosticoSistema
        from src.services.diagnostico.real_suggestions import RealSuggestionsDetector
        modules_status["services"] = True
        logger.info("‚úÖ Servi√ßos carregados da estrutura antiga")
    except ImportError:
        logger.error("‚ùå Nenhum servi√ßo dispon√≠vel")
        # Cria classes mock para evitar erros
        class DiagnosticoSistema:
            def __init__(self): pass
        class RealSuggestionsDetector:
            def __init__(self): pass
            def detect_real_problems(self): return []

# === IMPORTA√á√ïES MONITORING ===
try:
    from autocura.monitoring.metrics.gerenciador_metricas import GerenciadorMetricas
    modules_status["monitoring"] = True
    logger.info("‚úÖ Monitoramento carregado da nova estrutura")
except ImportError:
    try:
        from src.monitoring.metrics.gerenciador_metricas import GerenciadorMetricas
        modules_status["monitoring"] = True
        logger.info("‚úÖ Monitoramento carregado da estrutura antiga")
    except ImportError:
        logger.warning("‚ö†Ô∏è Monitoramento n√£o dispon√≠vel")

# === APLICA√á√ÉO FASTAPI ===
app = FastAPI(
    title="Sistema AutoCura - Modular",
    description="Sistema de autocura cognitiva com nova estrutura modular",
    version="1.0.0-modular",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === ESTADO GLOBAL ===
class ModularSystemState:
    def __init__(self):
        self.start_time = datetime.now()
        self.modules_loaded = modules_status
        
        # Inicializa componentes dispon√≠veis
        if modules_status["core"]:
            try:
                self.memory_manager = GerenciadorMemoria()
                self.context_recorder = RegistradorContexto()
                logger.info("‚úÖ Componentes core inicializados")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar core: {e}")
        
        if modules_status["services"]:
            try:
                self.diagnostic_service = DiagnosticoSistema()
                self.suggestions_detector = RealSuggestionsDetector()
                logger.info("‚úÖ Servi√ßos inicializados")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar servi√ßos: {e}")
        
        if modules_status["monitoring"]:
            try:
                self.metrics_manager = GerenciadorMetricas({"base_dir": "data/metricas"})
                logger.info("‚úÖ Monitoramento inicializado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar monitoramento: {e}")

system_state = ModularSystemState()

# === ENDPOINTS ===

@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "name": "Sistema AutoCura - Modular",
        "version": "1.0.0-modular",
        "status": "operational",
        "structure": "new_modular",
        "start_time": system_state.start_time.isoformat(),
        "modules_loaded": system_state.modules_loaded,
        "message": "üöÄ Nova estrutura modular funcionando!"
    }

@app.get("/api/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    health_status = {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "uptime_seconds": (datetime.now() - system_state.start_time).total_seconds(),
        "modules": system_state.modules_loaded,
        "structure_type": "modular",
        "components": {
            "memory_manager": hasattr(system_state, 'memory_manager'),
            "diagnostic_service": hasattr(system_state, 'diagnostic_service'),
            "metrics_manager": hasattr(system_state, 'metrics_manager')
        }
    }
    
    # Determina status geral
    total_modules = len(system_state.modules_loaded)
    loaded_modules = sum(1 for status in system_state.modules_loaded.values() if status)
    
    if loaded_modules == 0:
        health_status["status"] = "critical"
    elif loaded_modules < total_modules:
        health_status["status"] = "degraded"
    else:
        health_status["status"] = "healthy"
    
    return health_status

@app.get("/api/modules")
async def get_modules_info():
    """Informa√ß√µes detalhadas dos m√≥dulos"""
    return {
        "total_modules": len(system_state.modules_loaded),
        "loaded_modules": sum(1 for status in system_state.modules_loaded.values() if status),
        "modules_status": system_state.modules_loaded,
        "structure_info": {
            "type": "modular",
            "base_path": "autocura/",
            "fallback_enabled": True,
            "migration_completed": True
        }
    }

@app.get("/api/structure")
async def get_structure_info():
    """Informa√ß√µes sobre a estrutura modular"""
    structure_info = {
        "structure_type": "modular",
        "organization": {
            "core": {
                "path": "autocura/core/",
                "status": modules_status["core"],
                "components": ["memoria", "messaging", "interfaces", "self_modify"]
            },
            "services": {
                "path": "autocura/services/",
                "status": modules_status["services"],
                "components": ["ia", "diagnostico", "monitoramento", "etica", "guardiao"]
            },
            "monitoring": {
                "path": "autocura/monitoring/",
                "status": modules_status["monitoring"],
                "components": ["metrics", "observability", "integration"]
            },
            "security": {
                "path": "autocura/security/",
                "status": modules_status["security"],
                "components": ["criptografia", "deteccao"]
            }
        },
        "docker": {
            "new_dockerfile": "deployment/docker/Dockerfile.modular",
            "new_compose": "deployment/docker/docker-compose.modular.yml"
        },
        "migration": {
            "completed": True,
            "backup_location": "backup_reorganization/",
            "report_file": "reorganization_report.json"
        }
    }
    
    return structure_info

@app.get("/api/test/suggestions")
async def test_suggestions():
    """Testa sistema de sugest√µes se dispon√≠vel"""
    if not modules_status["services"]:
        return {"error": "Servi√ßos n√£o carregados"}
    
    try:
        if hasattr(system_state, 'suggestions_detector'):
            suggestions = system_state.suggestions_detector.detect_real_problems()
            return {
                "test": "suggestions",
                "status": "success",
                "suggestions_count": len(suggestions),
                "suggestions": suggestions[:3]  # Primeiras 3 apenas
            }
        else:
            return {"error": "Detector de sugest√µes n√£o dispon√≠vel"}
    except Exception as e:
        return {"error": f"Erro no teste: {str(e)}"}

# === INICIALIZA√á√ÉO ===
@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o do sistema"""
    logger.info("üöÄ Iniciando Sistema AutoCura Modular...")
    
    if modules_status["core"] and hasattr(system_state, 'context_recorder'):
        system_state.context_recorder.registrar_evento(
            "sistema_modular_iniciado",
            f"Sistema modular iniciado - M√≥dulos carregados: {sum(modules_status.values())}/{len(modules_status)}"
        )
    
    logger.info("‚úÖ Sistema AutoCura Modular iniciado com sucesso!")

@app.on_event("shutdown")
async def shutdown_event():
    """Finaliza√ß√£o do sistema"""
    logger.info("üîÑ Finalizando Sistema AutoCura Modular...")
    
    if modules_status["core"] and hasattr(system_state, 'context_recorder'):
        system_state.context_recorder.registrar_evento(
            "sistema_modular_finalizado",
            "Sistema modular finalizado"
        )
    
    logger.info("‚úÖ Sistema AutoCura Modular finalizado")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Sistema AutoCura - Estrutura Modular")
    print("=" * 50)
    print(f"üìä M√≥dulos carregados: {sum(modules_status.values())}/{len(modules_status)}")
    print(f"üèóÔ∏è  Estrutura: {'Modular' if any(modules_status.values()) else 'Fallback'}")
    print("üåê Acesso: http://localhost:8001")
    print("üìö Docs: http://localhost:8001/docs")
    print("=" * 50)
    
    # Executa o servidor
    uvicorn.run(
        "main_modular:app",
        host="0.0.0.0",
        port=8001,
        reload=False,
        log_level="info"
    )

if __name__ == "__main__":
    main() 